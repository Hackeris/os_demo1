; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	i:\os\10\a\krnl\krnl\fs.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_fsys@@3PAPAU_FILE_SYS@@A			; _fsys
PUBLIC	?fsmsg@@3U_tagMESSAGE@@A			; fsmsg
PUBLIC	?file_table@@3PAU_FILE@@A			; file_table
_BSS	SEGMENT
?_fsys@@3PAPAU_FILE_SYS@@A DD 04H DUP (?)		; _fsys
?fsmsg@@3U_tagMESSAGE@@A DB 030H DUP (?)		; fsmsg
_BSS	ENDS
_DATA	SEGMENT
?file_table@@3PAU_FILE@@A DD 060000H			; file_table
_DATA	ENDS
PUBLIC	?init_fsys@@YAXXZ				; init_fsys
EXTRN	?fsys_fat_initialize@@YAXXZ:PROC		; fsys_fat_initialize
; Function compile flags: /Ogtpy
; File i:\os\10\a\krnl\krnl\fs.cpp
;	COMDAT ?init_fsys@@YAXXZ
_TEXT	SEGMENT
?init_fsys@@YAXXZ PROC					; init_fsys, COMDAT

; 62   : 	fsys_fat_initialize();

	call	?fsys_fat_initialize@@YAXXZ		; fsys_fat_initialize
	xor	eax, eax
	mov	ecx, 2
	npad	4
$LL3@init_fsys:

; 63   : 
; 64   : 	int i ;
; 65   : 	for(i = 0;i < MAX_OPEN_FILE; i++){
; 66   : 		file_table[i].flags = FS_NOTHING;

	mov	edx, DWORD PTR ?file_table@@3PAU_FILE@@A ; file_table
	mov	DWORD PTR [eax+edx+32], ecx
	add	eax, 60					; 0000003cH
	cmp	eax, 1920				; 00000780H
	jl	SHORT $LL3@init_fsys

; 67   : 	}
; 68   : }

	ret	0
?init_fsys@@YAXXZ ENDP					; init_fsys
_TEXT	ENDS
PUBLIC	?volOpenFile@@YA?AU_FILE@@PBD@Z			; volOpenFile
; Function compile flags: /Ogtpy
;	COMDAT ?volOpenFile@@YA?AU_FILE@@PBD@Z
_TEXT	SEGMENT
_file$ = -120						; size = 60
_file$3164 = -120					; size = 60
$T3267 = -60						; size = 60
$T3265 = 8						; size = 4
_fname$ = 12						; size = 4
?volOpenFile@@YA?AU_FILE@@PBD@Z PROC			; volOpenFile, COMDAT

; 75   : 	if (fname)

	mov	eax, DWORD PTR _fname$[esp-4]
	sub	esp, 120				; 00000078H
	test	eax, eax
	push	ebx
	push	esi
	push	edi
	je	SHORT $LN1@volOpenFil

; 76   : 	{
; 77   : 		//! default to device 'a'
; 78   : 		unsigned char device = 'a';
; 79   : 
; 80   : 		//! filename
; 81   : 		char* filename = (char*) fname;
; 82   : 
; 83   : 		//! in all cases, if fname[1]==':' then the first character must be device letter
; 84   : 		//! FIXME: Using fname[2] do to BUG 2. Please see main.cpp for info
; 85   : 		if (fname[1]==':') {

	cmp	BYTE PTR [eax+1], 58			; 0000003aH
	mov	cl, 97					; 00000061H
	mov	edx, eax
	jne	SHORT $LN2@volOpenFil

; 86   : 			device = fname[0];

	mov	cl, BYTE PTR [eax]

; 87   : 			filename += 2; //strip it from pathname

	lea	edx, DWORD PTR [eax+2]
$LN2@volOpenFil:

; 88   : 		}
; 89   : 
; 90   : 		//! call filesystem
; 91   : 		if (_fsys [device - 'a']) {

	movzx	ebx, cl
	mov	eax, DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A[ebx*4-388]
	test	eax, eax
	je	SHORT $LN1@volOpenFil

; 92   : 			//! set volume specific information and return file
; 93   : 			FILE file = _fsys[device - 'a']->open (filename);

	push	edx
	mov	edx, DWORD PTR [eax+24]
	lea	ecx, DWORD PTR $T3267[esp+136]
	push	ecx
	call	edx
	mov	ecx, 15					; 0000000fH
	mov	esi, eax
	lea	edi, DWORD PTR _file$3164[esp+140]
	rep movsd
	add	esp, 8

; 94   : 			file.device_id = device;

	mov	DWORD PTR _file$3164[esp+188], ebx

; 95   : 			return file;

	jmp	SHORT $LN6@volOpenFil
$LN1@volOpenFil:

; 96   : 		}
; 97   : 	}
; 98   : 
; 99   : 	//! return invalid file
; 100  : 	FILE file;
; 101  : 	file.flags = FS_INVALID;

	mov	DWORD PTR _file$[esp+164], 2
$LN6@volOpenFil:

; 102  : 	return file;

	mov	eax, DWORD PTR $T3265[esp+128]
	mov	ecx, 15					; 0000000fH
	mov	edi, eax
	lea	esi, DWORD PTR _file$[esp+132]
	rep movsd
	pop	edi
	pop	esi
	pop	ebx

; 103  : }

	add	esp, 120				; 00000078H
	ret	0
?volOpenFile@@YA?AU_FILE@@PBD@Z ENDP			; volOpenFile
_TEXT	ENDS
PUBLIC	?volReadFile@@YAXPAU_FILE@@PAEI@Z		; volReadFile
; Function compile flags: /Ogtpy
;	COMDAT ?volReadFile@@YAXPAU_FILE@@PAEI@Z
_TEXT	SEGMENT
_file$ = 8						; size = 4
_Buffer$ = 12						; size = 4
_Length$ = 16						; size = 4
?volReadFile@@YAXPAU_FILE@@PAEI@Z PROC			; volReadFile, COMDAT

; 110  : 	if (file)

	mov	ecx, DWORD PTR _file$[esp-4]
	test	ecx, ecx
	je	SHORT $LN1@volReadFil

; 111  : 		if (_fsys [file->device_id - 'a'])

	mov	eax, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A[eax*4-388]
	test	eax, eax
	je	SHORT $LN1@volReadFil

; 112  : 			_fsys[file->device_id - 'a']->read (file,Buffer,Length);

	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR _file$[esp-4], ecx
	jmp	eax
$LN1@volReadFil:

; 113  : }

	ret	0
?volReadFile@@YAXPAU_FILE@@PAEI@Z ENDP			; volReadFile
_TEXT	ENDS
PUBLIC	?volCloseFile@@YAXPAU_FILE@@@Z			; volCloseFile
; Function compile flags: /Ogtpy
;	COMDAT ?volCloseFile@@YAXPAU_FILE@@@Z
_TEXT	SEGMENT
_file$ = 8						; size = 4
?volCloseFile@@YAXPAU_FILE@@@Z PROC			; volCloseFile, COMDAT

; 120  : 	if (file)

	mov	ecx, DWORD PTR _file$[esp-4]
	test	ecx, ecx
	je	SHORT $LN1@volCloseFi

; 121  : 		if (_fsys [file->device_id - 'a'])

	mov	eax, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A[eax*4-388]
	test	eax, eax
	je	SHORT $LN1@volCloseFi

; 122  : 			_fsys[file->device_id - 'a']->close (file);

	mov	DWORD PTR _file$[esp-4], ecx
	mov	ecx, DWORD PTR [eax+20]
	jmp	ecx
$LN1@volCloseFi:

; 123  : }

	ret	0
?volCloseFile@@YAXPAU_FILE@@@Z ENDP			; volCloseFile
_TEXT	ENDS
PUBLIC	?volRegisterFileSystem@@YAXPAU_FILE_SYS@@I@Z	; volRegisterFileSystem
;	COMDAT ?i@?1??volRegisterFileSystem@@YAXPAU_FILE_SYS@@I@Z@4HA
_BSS	SEGMENT
?i@?1??volRegisterFileSystem@@YAXPAU_FILE_SYS@@I@Z@4HA DD 01H DUP (?) ; `volRegisterFileSystem'::`2'::i
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT ?volRegisterFileSystem@@YAXPAU_FILE_SYS@@I@Z
_TEXT	SEGMENT
_fsys$ = 8						; size = 4
_deviceID$ = 12						; size = 4
?volRegisterFileSystem@@YAXPAU_FILE_SYS@@I@Z PROC	; volRegisterFileSystem, COMDAT

; 131  : 	static int i=0;
; 132  : 
; 133  : 	if (i < DEVICE_MAX)

	cmp	DWORD PTR ?i@?1??volRegisterFileSystem@@YAXPAU_FILE_SYS@@I@Z@4HA, 4
	jge	SHORT $LN1@volRegiste

; 134  : 		if (fsys){

	mov	eax, DWORD PTR _fsys$[esp-4]
	test	eax, eax
	je	SHORT $LN1@volRegiste

; 135  : 			_fsys[ deviceID ] = fsys;

	mov	ecx, DWORD PTR _deviceID$[esp-4]

; 136  : 			i++;

	add	DWORD PTR ?i@?1??volRegisterFileSystem@@YAXPAU_FILE_SYS@@I@Z@4HA, 1
	mov	DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A[ecx*4], eax
$LN1@volRegiste:

; 137  : 		}
; 138  : }

	ret	0
?volRegisterFileSystem@@YAXPAU_FILE_SYS@@I@Z ENDP	; volRegisterFileSystem
_TEXT	ENDS
PUBLIC	?volUnregisterFileSystem@@YAXPAU_FILE_SYS@@@Z	; volUnregisterFileSystem
; Function compile flags: /Ogtpy
;	COMDAT ?volUnregisterFileSystem@@YAXPAU_FILE_SYS@@@Z
_TEXT	SEGMENT
_fsys$ = 8						; size = 4
?volUnregisterFileSystem@@YAXPAU_FILE_SYS@@@Z PROC	; volUnregisterFileSystem, COMDAT

; 145  : 	for (int i=0;i < DEVICE_MAX; i++)
; 146  : 		if (_fsys[i]==fsys)

	mov	eax, DWORD PTR _fsys$[esp-4]
	xor	ecx, ecx
	cmp	DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A, eax
	jne	SHORT $LN3@volUnregis

; 147  : 			_fsys[i]=0;

	mov	DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A, ecx
$LN3@volUnregis:

; 145  : 	for (int i=0;i < DEVICE_MAX; i++)
; 146  : 		if (_fsys[i]==fsys)

	cmp	DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A+4, eax
	jne	SHORT $LN11@volUnregis

; 147  : 			_fsys[i]=0;

	mov	DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A+4, ecx
$LN11@volUnregis:

; 145  : 	for (int i=0;i < DEVICE_MAX; i++)
; 146  : 		if (_fsys[i]==fsys)

	cmp	DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A+8, eax
	jne	SHORT $LN13@volUnregis

; 147  : 			_fsys[i]=0;

	mov	DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A+8, ecx
$LN13@volUnregis:

; 145  : 	for (int i=0;i < DEVICE_MAX; i++)
; 146  : 		if (_fsys[i]==fsys)

	cmp	DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A+12, eax
	jne	SHORT $LN15@volUnregis

; 147  : 			_fsys[i]=0;

	mov	DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A+12, ecx
$LN15@volUnregis:

; 148  : }

	ret	0
?volUnregisterFileSystem@@YAXPAU_FILE_SYS@@@Z ENDP	; volUnregisterFileSystem
_TEXT	ENDS
PUBLIC	?volUnregisterFileSystemByID@@YAXI@Z		; volUnregisterFileSystemByID
; Function compile flags: /Ogtpy
;	COMDAT ?volUnregisterFileSystemByID@@YAXI@Z
_TEXT	SEGMENT
_deviceID$ = 8						; size = 4
?volUnregisterFileSystemByID@@YAXI@Z PROC		; volUnregisterFileSystemByID, COMDAT

; 155  : 	if (deviceID < DEVICE_MAX)

	mov	eax, DWORD PTR _deviceID$[esp-4]
	cmp	eax, 4
	jae	SHORT $LN1@volUnregis@2

; 156  : 		_fsys [deviceID] = 0;

	mov	DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A[eax*4], 0
$LN1@volUnregis@2:

; 157  : }

	ret	0
?volUnregisterFileSystemByID@@YAXI@Z ENDP		; volUnregisterFileSystemByID
_TEXT	ENDS
PUBLIC	?fsys_do_open@@YAHPBD@Z				; fsys_do_open
EXTRN	?strcpy@@YAPADPADPBD@Z:PROC			; strcpy
EXTRN	?va2la@@YAPAXHPAX@Z:PROC			; va2la
EXTRN	?strlen@@YAIPBD@Z:PROC				; strlen
; Function compile flags: /Ogtpy
;	COMDAT ?fsys_do_open@@YAHPBD@Z
_TEXT	SEGMENT
$T3291 = -184						; size = 60
$T3292 = -124						; size = 60
_name$ = -64						; size = 64
_filename$ = 8						; size = 4
?fsys_do_open@@YAHPBD@Z PROC				; fsys_do_open, COMDAT

; 160  : {

	sub	esp, 184				; 000000b8H
	push	esi

; 161  : 	int fd = -1;
; 162  : 	int i;
; 163  : 	if(strlen(filename) >= MAX_PATH){

	mov	esi, DWORD PTR _filename$[esp+184]
	push	esi
	call	?strlen@@YAIPBD@Z			; strlen
	add	esp, 4
	cmp	eax, 64					; 00000040H
	jb	SHORT $LN7@fsys_do_op

; 164  : 		return -1;

	or	eax, -1
	pop	esi

; 182  : }

	add	esp, 184				; 000000b8H
	ret	0
$LN7@fsys_do_op:

; 165  : 	}
; 166  : 	char name[MAX_PATH];
; 167  : 	strcpy(name,(char*)va2la(fsmsg.source,(void*)filename));

	mov	eax, DWORD PTR ?fsmsg@@3U_tagMESSAGE@@A
	push	ebx
	push	esi
	push	eax
	call	?va2la@@YAPAXHPAX@Z			; va2la
	push	eax
	lea	ecx, DWORD PTR _name$[esp+204]
	push	ecx
	call	?strcpy@@YAPADPADPBD@Z			; strcpy
	mov	eax, DWORD PTR ?file_table@@3PAU_FILE@@A ; file_table
	add	esp, 16					; 00000010H

; 168  : 	for(i = 0;i< MAX_OPEN_FILE; i++){

	xor	ebx, ebx
	add	eax, 32					; 00000020H
	npad	1
$LL6@fsys_do_op:

; 169  : 		if(file_table[i].flags == FS_NOTHING){

	cmp	DWORD PTR [eax], 2
	je	SHORT $LN11@fsys_do_op
	add	ebx, 1
	add	eax, 60					; 0000003cH
	cmp	ebx, 32					; 00000020H
	jl	SHORT $LL6@fsys_do_op
	pop	ebx

; 179  : 		return -1;

	or	eax, -1
	pop	esi

; 182  : }

	add	esp, 184				; 000000b8H
	ret	0
$LN11@fsys_do_op:

; 170  : 			fd = i;
; 171  : 			break;
; 172  : 		}
; 173  : 	}
; 174  : 	if(fd == -1){

	cmp	ebx, -1

; 175  : 		return -1;

	je	SHORT $LN13@fsys_do_op
	push	edi

; 176  : 	}
; 177  : 	file_table[i] = volOpenFile(filename);

	lea	edx, DWORD PTR $T3292[esp+196]
	push	esi
	push	edx
	call	?volOpenFile@@YA?AU_FILE@@PBD@Z		; volOpenFile
	mov	esi, eax
	mov	eax, ebx
	shl	eax, 4
	sub	eax, ebx
	mov	ecx, 15					; 0000000fH
	lea	edi, DWORD PTR $T3291[esp+204]
	rep movsd
	mov	ecx, DWORD PTR ?file_table@@3PAU_FILE@@A ; file_table
	add	eax, eax
	add	eax, eax
	lea	edi, DWORD PTR [eax+ecx]
	mov	ecx, 15					; 0000000fH
	lea	esi, DWORD PTR $T3291[esp+204]
	rep movsd

; 178  : 	if(file_table[i].flags == FS_INVALID){

	mov	edx, DWORD PTR ?file_table@@3PAU_FILE@@A ; file_table
	add	esp, 8
	cmp	DWORD PTR [eax+edx+32], 2
	pop	edi
	jne	SHORT $LN1@fsys_do_op
$LN13@fsys_do_op:
	pop	ebx

; 179  : 		return -1;

	or	eax, -1
	pop	esi

; 182  : }

	add	esp, 184				; 000000b8H
	ret	0
$LN1@fsys_do_op:

; 180  : 	}
; 181  : 	return fd;

	mov	eax, ebx
	pop	ebx
	pop	esi

; 182  : }

	add	esp, 184				; 000000b8H
	ret	0
?fsys_do_open@@YAHPBD@Z ENDP				; fsys_do_open
_TEXT	ENDS
PUBLIC	?fsys_do_read@@YAHHPAEI@Z			; fsys_do_read
; Function compile flags: /Ogtpy
;	COMDAT ?fsys_do_read@@YAHHPAEI@Z
_TEXT	SEGMENT
_n$3221 = -8						; size = 4
tv286 = -4						; size = 4
_fd$ = 8						; size = 4
_buffer$ = 12						; size = 4
_len$ = 16						; size = 4
?fsys_do_read@@YAHHPAEI@Z PROC				; fsys_do_read, COMDAT

; 185  : {

	sub	esp, 8

; 186  : 	if(fd < MAX_OPEN_FILE && fd >= 0){

	cmp	DWORD PTR _fd$[esp+4], 31		; 0000001fH
	ja	$LN4@fsys_do_re

; 187  : 		//volReadFile(&file_table[fd],
; 188  : 		//	(unsigned char*)va2la(fsmsg.source,buffer),len);
; 189  : 		//return len;
; 190  : 		int n = len / SECTOR_SIZE,i = 0;
; 191  : 		while(file_table[i].eof != 1 && n --){

	mov	edx, DWORD PTR ?file_table@@3PAU_FILE@@A ; file_table
	push	esi
	mov	esi, DWORD PTR _len$[esp+8]
	push	edi
	shr	esi, 9
	xor	edi, edi
	cmp	DWORD PTR [edx+44], 1
	je	$LN2@fsys_do_re
	push	ebx
	mov	ebx, DWORD PTR _buffer$[esp+16]
	push	ebp
	xor	ebp, ebp
$LL3@fsys_do_re:
	mov	eax, esi
	sub	esi, 1
	test	eax, eax
	mov	DWORD PTR _n$3221[esp+24], esi
	je	SHORT $LN20@fsys_do_re

; 192  : 			volReadFile(&file_table[fd],
; 193  : 				(unsigned char*)va2la(fsmsg.source,(char*)buffer + i*SECTOR_SIZE),SECTOR_SIZE);

	mov	ecx, DWORD PTR ?fsmsg@@3U_tagMESSAGE@@A
	push	ebx
	push	ecx
	call	?va2la@@YAPAXHPAX@Z			; va2la
	mov	ecx, DWORD PTR _fd$[esp+28]
	mov	edx, ecx
	shl	edx, 4
	sub	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR ?file_table@@3PAU_FILE@@A ; file_table
	lea	ecx, DWORD PTR [edx+ecx*4]
	add	esp, 8
	test	ecx, ecx
	je	SHORT $LN7@fsys_do_re
	mov	esi, DWORD PTR [ecx+56]
	mov	esi, DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A[esi*4-388]
	test	esi, esi
	je	SHORT $LN18@fsys_do_re
	mov	edx, DWORD PTR [esi+16]
	push	512					; 00000200H
	push	eax
	push	ecx
	call	edx
	mov	edx, DWORD PTR ?file_table@@3PAU_FILE@@A ; file_table
	add	esp, 12					; 0000000cH
$LN18@fsys_do_re:
	mov	esi, DWORD PTR _n$3221[esp+24]
$LN7@fsys_do_re:

; 194  : 			i ++;

	add	ebp, 60					; 0000003cH
	add	edi, 1
	add	ebx, 512				; 00000200H
	cmp	DWORD PTR [edx+ebp+44], 1
	jne	SHORT $LL3@fsys_do_re
$LN20@fsys_do_re:
	pop	ebp
	pop	ebx
$LN2@fsys_do_re:

; 195  : 		}
; 196  : 		if(file_table[fd].eof != 1){

	mov	eax, DWORD PTR _fd$[esp+12]
	mov	esi, eax
	shl	esi, 4
	sub	esi, eax
	add	esi, esi
	add	esi, esi
	cmp	DWORD PTR [esi+edx+44], 1
	je	SHORT $LN19@fsys_do_re

; 197  : 			volReadFile(&file_table[fd],
; 198  : 				(unsigned char*)va2la(fsmsg.source,(char*)buffer + i*SECTOR_SIZE),len % SECTOR_SIZE);

	mov	eax, DWORD PTR ?fsmsg@@3U_tagMESSAGE@@A
	shl	edi, 9
	add	edi, DWORD PTR _buffer$[esp+12]
	push	edi
	push	eax
	call	?va2la@@YAPAXHPAX@Z			; va2la
	mov	ecx, DWORD PTR ?file_table@@3PAU_FILE@@A ; file_table
	add	esp, 8
	add	ecx, esi
	je	SHORT $LN19@fsys_do_re
	mov	edx, DWORD PTR [ecx+56]
	mov	edx, DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A[edx*4-388]
	test	edx, edx
	je	SHORT $LN19@fsys_do_re
	mov	esi, DWORD PTR _len$[esp+12]
	and	esi, 511				; 000001ffH
	push	esi
	push	eax
	mov	eax, DWORD PTR [edx+16]
	push	ecx
	call	eax
	add	esp, 12					; 0000000cH
$LN19@fsys_do_re:

; 199  : 		}
; 200  : 		return len;

	mov	eax, DWORD PTR _len$[esp+12]
	pop	edi
	pop	esi

; 203  : }

	add	esp, 8
	ret	0
$LN4@fsys_do_re:

; 201  : 	}
; 202  : 	return -1;

	or	eax, -1

; 203  : }

	add	esp, 8
	ret	0
?fsys_do_read@@YAHHPAEI@Z ENDP				; fsys_do_read
_TEXT	ENDS
PUBLIC	?fsys_get_file_len@@YAHH@Z			; fsys_get_file_len
; Function compile flags: /Ogtpy
;	COMDAT ?fsys_get_file_len@@YAHH@Z
_TEXT	SEGMENT
_fd$ = 8						; size = 4
?fsys_get_file_len@@YAHH@Z PROC				; fsys_get_file_len, COMDAT

; 207  : 	if(fd < MAX_OPEN_FILE && fd >= 0){

	mov	eax, DWORD PTR _fd$[esp-4]
	cmp	eax, 31					; 0000001fH
	ja	SHORT $LN1@fsys_get_f

; 208  : 		return file_table[fd].file_len;

	mov	edx, DWORD PTR ?file_table@@3PAU_FILE@@A ; file_table
	mov	ecx, eax
	shl	ecx, 4
	sub	ecx, eax
	mov	eax, DWORD PTR [edx+ecx*4+36]

; 211  : }

	ret	0
$LN1@fsys_get_f:

; 209  : 	}
; 210  : 	return -1;

	or	eax, -1

; 211  : }

	ret	0
?fsys_get_file_len@@YAHH@Z ENDP				; fsys_get_file_len
_TEXT	ENDS
PUBLIC	?fsys_do_close@@YAHH@Z				; fsys_do_close
; Function compile flags: /Ogtpy
;	COMDAT ?fsys_do_close@@YAHH@Z
_TEXT	SEGMENT
_fd$ = 8						; size = 4
?fsys_do_close@@YAHH@Z PROC				; fsys_do_close, COMDAT

; 215  : 	if(fd < MAX_OPEN_FILE && fd >= 0){

	mov	eax, DWORD PTR _fd$[esp-4]
	cmp	eax, 31					; 0000001fH
	ja	SHORT $LN1@fsys_do_cl

; 216  : 		volCloseFile(&file_table[fd]);

	mov	edx, DWORD PTR ?file_table@@3PAU_FILE@@A ; file_table
	mov	ecx, eax
	shl	ecx, 4
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*4]
	test	eax, eax
	je	SHORT $LN4@fsys_do_cl
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A[ecx*4-388]
	test	ecx, ecx
	je	SHORT $LN4@fsys_do_cl
	mov	edx, DWORD PTR [ecx+20]
	push	eax
	call	edx
	add	esp, 4
$LN4@fsys_do_cl:

; 217  : 		return 0;

	xor	eax, eax

; 220  : }

	ret	0
$LN1@fsys_do_cl:

; 218  : 	}
; 219  : 	return -1;

	or	eax, -1

; 220  : }

	ret	0
?fsys_do_close@@YAHH@Z ENDP				; fsys_do_close
_TEXT	ENDS
PUBLIC	??_C@_0BB@PADLHMOI@FS?5initialized?4?6?$AA@	; `string'
PUBLIC	?task_fs@@YAXXZ					; task_fs
EXTRN	?send_recv@@YAHHHPAU_tagMESSAGE@@@Z:PROC	; send_recv
EXTRN	?DbgPrintf@@YAHPBDZZ:PROC			; DbgPrintf
;	COMDAT ??_C@_0BB@PADLHMOI@FS?5initialized?4?6?$AA@
CONST	SEGMENT
??_C@_0BB@PADLHMOI@FS?5initialized?4?6?$AA@ DB 'FS initialized.', 0aH, 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?task_fs@@YAXXZ
_TEXT	SEGMENT
?task_fs@@YAXXZ PROC					; task_fs, COMDAT

; 19   : {

	push	esi

; 20   : 	init_fsys();

	call	?fsys_fat_initialize@@YAXXZ		; fsys_fat_initialize
	xor	eax, eax
	npad	8
$LL15@task_fs:
	mov	ecx, DWORD PTR ?file_table@@3PAU_FILE@@A ; file_table
	mov	DWORD PTR [eax+ecx+32], 2
	add	eax, 60					; 0000003cH
	cmp	eax, 1920				; 00000780H
	jl	SHORT $LL15@task_fs

; 21   : 
; 22   : 	DbgPrintf("FS initialized.\n");

	push	OFFSET ??_C@_0BB@PADLHMOI@FS?5initialized?4?6?$AA@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 4
$LL10@task_fs:

; 23   : 	while(1){
; 24   : 		send_recv(RECEIVE,ANY_TASK,&fsmsg);

	push	OFFSET ?fsmsg@@3U_tagMESSAGE@@A		; fsmsg
	push	46					; 0000002eH
	push	2
	call	?send_recv@@YAHHHPAU_tagMESSAGE@@@Z	; send_recv

; 25   : 		int src = fsmsg.source;
; 26   : 		switch(fsmsg.type){

	mov	eax, DWORD PTR ?fsmsg@@3U_tagMESSAGE@@A+4
	mov	esi, DWORD PTR ?fsmsg@@3U_tagMESSAGE@@A
	add	eax, -1006				; fffffc12H
	add	esp, 12					; 0000000cH
	cmp	eax, 4
	ja	$LN1@task_fs
	jmp	DWORD PTR $LN31@task_fs[eax*4]
$LN6@task_fs:

; 27   : 			case OPEN:
; 28   : 				{
; 29   : 					//DbgPrintf("FS OPEN\n");
; 30   : 					fsmsg.FD = fsys_do_open((char*)fsmsg.PATHNAME);

	mov	edx, DWORD PTR ?fsmsg@@3U_tagMESSAGE@@A+40
	push	edx
	call	?fsys_do_open@@YAHPBD@Z			; fsys_do_open
	add	esp, 4

; 31   : 					//DbgPrintf("FS OPEN OK\n");
; 32   : 				}
; 33   : 				break;

	jmp	SHORT $LN26@task_fs
$LN5@task_fs:

; 34   : 			case READ:
; 35   : 				{
; 36   : 					//DbgPrintf("fd :%d buf: 0x%x cnt: %d\n",fsmsg.FD,(unsigned char*)fsmsg.BUF,fsmsg.CNT);
; 37   : 					fsmsg.RETVAL = fsys_do_read(fsmsg.FD,(unsigned char*)fsmsg.BUF,fsmsg.CNT);

	mov	eax, DWORD PTR ?fsmsg@@3U_tagMESSAGE@@A+12
	mov	ecx, DWORD PTR ?fsmsg@@3U_tagMESSAGE@@A+44
	mov	edx, DWORD PTR ?fsmsg@@3U_tagMESSAGE@@A+8
	push	eax
	push	ecx
	push	edx
	call	?fsys_do_read@@YAHHPAEI@Z		; fsys_do_read
	add	esp, 12					; 0000000cH

; 38   : 					//DbgPrintf("end at fd :%d buf: 0x%x cnt: %d\n",fsmsg.FD,(unsigned char*)fsmsg.BUF,fsmsg.CNT);
; 39   : 				}
; 40   : 				break;

	jmp	SHORT $LN26@task_fs
$LN3@task_fs:

; 41   : 			case WRITE:
; 42   : 				break;
; 43   : 			case CLOSE:
; 44   : 				{
; 45   : 					fsmsg.RETVAL = fsys_do_close(fsmsg.FD);

	mov	eax, DWORD PTR ?fsmsg@@3U_tagMESSAGE@@A+8
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN25@task_fs
	test	eax, eax
	jl	SHORT $LN25@task_fs
	mov	edx, DWORD PTR ?file_table@@3PAU_FILE@@A ; file_table
	mov	ecx, eax
	shl	ecx, 4
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*4]
	test	eax, eax
	je	SHORT $LN21@task_fs
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR ?_fsys@@3PAPAU_FILE_SYS@@A[ecx*4-388]
	test	ecx, ecx
	je	SHORT $LN21@task_fs
	mov	edx, DWORD PTR [ecx+20]
	push	eax
	call	edx
	add	esp, 4
$LN21@task_fs:
	xor	eax, eax
	jmp	SHORT $LN26@task_fs
$LN2@task_fs:

; 46   : 				}
; 47   : 				break;
; 48   : 			case SIZE:
; 49   : 				{
; 50   : 					fsmsg.RETVAL = fsys_get_file_len(fsmsg.FD);

	mov	eax, DWORD PTR ?fsmsg@@3U_tagMESSAGE@@A+8
	cmp	eax, 31					; 0000001fH
	ja	SHORT $LN25@task_fs
	mov	edx, DWORD PTR ?file_table@@3PAU_FILE@@A ; file_table
	mov	ecx, eax
	shl	ecx, 4
	sub	ecx, eax
	mov	eax, DWORD PTR [edx+ecx*4+36]
	jmp	SHORT $LN26@task_fs
$LN25@task_fs:
	or	eax, -1
$LN26@task_fs:
	mov	DWORD PTR ?fsmsg@@3U_tagMESSAGE@@A+8, eax
$LN1@task_fs:

; 51   : 				}
; 52   : 				break;
; 53   : 			default:
; 54   : 				break;
; 55   : 		}
; 56   : 		send_recv(SEND,src,&fsmsg);

	push	OFFSET ?fsmsg@@3U_tagMESSAGE@@A		; fsmsg
	push	esi
	push	1
	call	?send_recv@@YAHHHPAU_tagMESSAGE@@@Z	; send_recv
	add	esp, 12					; 0000000cH

; 57   : 	}

	jmp	$LL10@task_fs
$LN31@task_fs:

; 58   : }

	DD	$LN6@task_fs
	DD	$LN3@task_fs
	DD	$LN5@task_fs
	DD	$LN1@task_fs
	DD	$LN2@task_fs
?task_fs@@YAXXZ ENDP					; task_fs
_TEXT	ENDS
END
