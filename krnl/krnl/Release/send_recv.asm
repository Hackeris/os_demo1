; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	i:\os\10\a\krnl\krnl\send_recv.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?send_recv@@YAHHHPAU_tagMESSAGE@@@Z		; send_recv
EXTRN	?recv@@YAHHPAU_tagMESSAGE@@@Z:PROC		; recv
EXTRN	?send@@YAHHPAU_tagMESSAGE@@@Z:PROC		; send
EXTRN	?memset@@YAPAXPAXDI@Z:PROC			; memset
; Function compile flags: /Ogtpy
; File i:\os\10\a\krnl\krnl\send_recv.cpp
;	COMDAT ?send_recv@@YAHHHPAU_tagMESSAGE@@@Z
_TEXT	SEGMENT
_function$ = 8						; size = 4
_src_dest$ = 12						; size = 4
_msg$ = 16						; size = 4
?send_recv@@YAHHHPAU_tagMESSAGE@@@Z PROC		; send_recv, COMDAT

; 7    : {

	push	ebx
	push	esi

; 8    : 	int ret = 0;
; 9    : 
; 10   : 	if(function == RECEIVE){

	mov	esi, DWORD PTR _msg$[esp+4]
	push	edi
	mov	edi, DWORD PTR _function$[esp+8]
	xor	ebx, ebx
	cmp	edi, 2
	jne	SHORT $LN8@send_recv

; 11   : 		memset(msg,0,sizeof(MESSAGE));

	push	48					; 00000030H
	push	ebx
	push	esi
	call	?memset@@YAPAXPAXDI@Z			; memset
	add	esp, 12					; 0000000cH
$LN8@send_recv:

; 12   : 	}
; 13   : 
; 14   : 	switch(function){

	mov	eax, edi
	sub	eax, 1
	je	SHORT $LN3@send_recv
	sub	eax, 1
	je	SHORT $LN2@send_recv
	sub	eax, 1
	jne	SHORT $LN11@send_recv

; 15   : 	case BOTH:
; 16   : 		{
; 17   : 			ret = send(src_dest,msg);

	mov	edi, DWORD PTR _src_dest$[esp+8]
	push	esi
	push	edi
	call	?send@@YAHHPAU_tagMESSAGE@@@Z		; send
	add	esp, 8

; 18   : 			if(ret == 0){

	test	eax, eax
	jne	SHORT $LN6@send_recv

; 19   : 				ret = recv(src_dest,msg);

	push	esi
	push	edi
	call	?recv@@YAHHPAU_tagMESSAGE@@@Z		; recv
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 40   : }

	ret	0
$LN2@send_recv:

; 26   : 		}
; 27   : 		break;
; 28   : 	case RECEIVE:
; 29   : 		{
; 30   : 			ret = recv(src_dest,msg);

	mov	eax, DWORD PTR _src_dest$[esp+8]
	push	esi
	push	eax
	call	?recv@@YAHHPAU_tagMESSAGE@@@Z		; recv
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 40   : }

	ret	0
$LN3@send_recv:

; 20   : 			}
; 21   : 		}
; 22   : 		break;
; 23   : 	case SEND:
; 24   : 		{
; 25   : 			ret = send(src_dest,msg);

	mov	ecx, DWORD PTR _src_dest$[esp+8]
	push	esi
	push	ecx
	call	?send@@YAHHPAU_tagMESSAGE@@@Z		; send
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx

; 40   : }

	ret	0
$LN11@send_recv:

; 31   : 		}
; 32   : 		break;
; 33   : 	default:
; 34   : 		{
; 35   : 			//	assert((function == BOTH) || (function == SEND) || (function == RECEIVE));
; 36   : 		}
; 37   : 		break;
; 38   : 	}
; 39   : 	return ret;

	mov	eax, ebx
$LN6@send_recv:
	pop	edi
	pop	esi
	pop	ebx

; 40   : }

	ret	0
?send_recv@@YAHHHPAU_tagMESSAGE@@@Z ENDP		; send_recv
_TEXT	ENDS
END
