; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	i:\os\10\a\krnl\krnl\main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BA@BJOBDCJI@ACPI?5NVS?5Memory?$AA@	; `string'
PUBLIC	??_C@_0N@EHGNOCNM@ACPI?5Reclaim?$AA@		; `string'
PUBLIC	??_C@_08NKCLJDKG@Reserved?$AA@			; `string'
PUBLIC	??_C@_09PPNHOLKJ@Available?$AA@			; `string'
PUBLIC	?strMemoryTypes@@3PAPADA			; strMemoryTypes
_DATA	SEGMENT
?strMemoryTypes@@3PAPADA DD FLAT:??_C@_09PPNHOLKJ@Available?$AA@ ; strMemoryTypes
	DD	FLAT:??_C@_08NKCLJDKG@Reserved?$AA@
	DD	FLAT:??_C@_0N@EHGNOCNM@ACPI?5Reclaim?$AA@
	DD	FLAT:??_C@_0BA@BJOBDCJI@ACPI?5NVS?5Memory?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0BA@BJOBDCJI@ACPI?5NVS?5Memory?$AA@
CONST	SEGMENT
??_C@_0BA@BJOBDCJI@ACPI?5NVS?5Memory?$AA@ DB 'ACPI NVS Memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EHGNOCNM@ACPI?5Reclaim?$AA@
CONST	SEGMENT
??_C@_0N@EHGNOCNM@ACPI?5Reclaim?$AA@ DB 'ACPI Reclaim', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NKCLJDKG@Reserved?$AA@
CONST	SEGMENT
??_C@_08NKCLJDKG@Reserved?$AA@ DB 'Reserved', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PPNHOLKJ@Available?$AA@
CONST	SEGMENT
??_C@_09PPNHOLKJ@Available?$AA@ DB 'Available', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0EB@LGNJJLBD@?5?5region?5?$CFd?3?5start?3?50x?$CFx?$CFx?5lengt@ ; `string'
PUBLIC	??_C@_0N@LJEOFCP@Memory?5map?3?6?$AA@		; `string'
PUBLIC	??_C@_0BN@OPOBFDOJ@Memory?5size?3?5?$CFd?5KBs?$CI?$CFd?5MB?$CJ?4?6?$AA@ ; `string'
PUBLIC	?kernel_main@@YAHPAU_tag_boot_info@@@Z		; kernel_main
EXTRN	?task_start@@YAXXZ:PROC				; task_start
EXTRN	?i86_initialize_clock_irq@@YAHXZ:PROC		; i86_initialize_clock_irq
EXTRN	?init_proc@@YAXXZ:PROC				; init_proc
EXTRN	?init_syscall@@YAHXZ:PROC			; init_syscall
EXTRN	?ticks@@3IA:DWORD				; ticks
EXTRN	?pmmgr_deinit_region@@YAXII@Z:PROC		; pmmgr_deinit_region
EXTRN	?pmmgr_init_region@@YAXII@Z:PROC		; pmmgr_init_region
EXTRN	?pmmgr_init@@YAXII@Z:PROC			; pmmgr_init
EXTRN	?DbgPrintf@@YAHPBDZZ:PROC			; DbgPrintf
EXTRN	?install_def_irq@@YAXXZ:PROC			; install_def_irq
EXTRN	?i86_hal_initialize@@YAHXZ:PROC			; i86_hal_initialize
;	COMDAT ??_C@_0EB@LGNJJLBD@?5?5region?5?$CFd?3?5start?3?50x?$CFx?$CFx?5lengt@
; File i:\os\10\a\krnl\krnl\main.cpp
CONST	SEGMENT
??_C@_0EB@LGNJJLBD@?5?5region?5?$CFd?3?5start?3?50x?$CFx?$CFx?5lengt@ DB ' '
	DB	' region %d: start: 0x%x%x length (bytes): 0x%x%x type: %d (%s'
	DB	')', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LJEOFCP@Memory?5map?3?6?$AA@
CONST	SEGMENT
??_C@_0N@LJEOFCP@Memory?5map?3?6?$AA@ DB 'Memory map:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OPOBFDOJ@Memory?5size?3?5?$CFd?5KBs?$CI?$CFd?5MB?$CJ?4?6?$AA@
CONST	SEGMENT
??_C@_0BN@OPOBFDOJ@Memory?5size?3?5?$CFd?5KBs?$CI?$CFd?5MB?$CJ?4?6?$AA@ DB 'M'
	DB	'emory size: %d KBs(%d MB).', 0aH, 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?kernel_main@@YAHPAU_tag_boot_info@@@Z
_TEXT	SEGMENT
_bootinfo$ = 8						; size = 4
?kernel_main@@YAHPAU_tag_boot_info@@@Z PROC		; kernel_main, COMDAT

; 39   : 	uint32_t memSize = 1024 + bootinfo->m_memoryLo + bootinfo->m_memoryHi*64;

	mov	eax, DWORD PTR _bootinfo$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax+8]
	add	esi, 16					; 00000010H
	shl	esi, 6
	add	esi, DWORD PTR [eax+4]
	push	edi

; 40   : 
; 41   : 	i86_hal_initialize();

	call	?i86_hal_initialize@@YAHXZ		; i86_hal_initialize

; 42   : 
; 43   : 	install_def_irq();

	call	?install_def_irq@@YAXXZ			; install_def_irq

; 44   : 
; 45   : 	//i86_vmm_initialize(bootinfo);
; 46   : 	DbgPrintf("Memory size: %d KBs(%d MB).\n",memSize,memSize / 1024);

	mov	eax, esi
	shr	eax, 10					; 0000000aH
	push	eax
	push	esi
	push	OFFSET ??_C@_0BN@OPOBFDOJ@Memory?5size?3?5?$CFd?5KBs?$CI?$CFd?5MB?$CJ?4?6?$AA@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf

; 47   : 	pmmgr_init(memSize,0x200000);

	push	2097152					; 00200000H
	push	esi
	call	?pmmgr_init@@YAXII@Z			; pmmgr_init

; 48   : 	memory_region* region = (memory_region*)0x1000;
; 49   : 	DbgPrintf("Memory map:\n");

	push	OFFSET ??_C@_0N@LJEOFCP@Memory?5map?3?6?$AA@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 24					; 00000018H

; 50   : 	for(int i = 0; i<10 ; i ++){

	xor	edi, edi
	mov	esi, 4112				; 00001010H
	npad	4
$LL6@kernel_mai:

; 51   : 		if(region[i].type > 4)

	cmp	DWORD PTR [esi], 4
	ja	SHORT $LN10@kernel_mai

; 52   : 			break;
; 53   : 		if(i>0 && region[i].sizeLo == 0)

	test	edi, edi
	jle	SHORT $LN2@kernel_mai
	cmp	DWORD PTR [esi-8], 0
	je	SHORT $LN10@kernel_mai
$LN2@kernel_mai:

; 54   : 			break;
; 55   : 				//! display entry
; 56   : 		DbgPrintf ("  region %d: start: 0x%x%x length (bytes): 0x%x%x type: %d (%s)\n", i, 
; 57   : 			region[i].startHi, region[i].startLo,
; 58   : 			region[i].sizeHi,region[i].sizeLo,
; 59   : 			region[i].type, strMemoryTypes[region[i].type-1]);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR ?strMemoryTypes@@3PAPADA[eax*4-4]
	mov	edx, DWORD PTR [esi-8]
	push	ecx
	mov	ecx, DWORD PTR [esi-16]
	push	eax
	mov	eax, DWORD PTR [esi-4]
	push	edx
	mov	edx, DWORD PTR [esi-12]
	push	eax
	push	ecx
	push	edx
	push	edi
	push	OFFSET ??_C@_0EB@LGNJJLBD@?5?5region?5?$CFd?3?5start?3?50x?$CFx?$CFx?5lengt@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H

; 60   : 
; 61   : 		if(region[i].type == 1)		//	if region is available, init it for use(free)

	cmp	DWORD PTR [esi], 1
	jne	SHORT $LN5@kernel_mai

; 62   : 			pmmgr_init_region(region[i].startLo,region[i].sizeLo);

	mov	eax, DWORD PTR [esi-8]
	mov	ecx, DWORD PTR [esi-16]
	push	eax
	push	ecx
	call	?pmmgr_init_region@@YAXII@Z		; pmmgr_init_region
	add	esp, 8
$LN5@kernel_mai:
	add	esi, 24					; 00000018H
	add	edi, 1
	cmp	esi, 4352				; 00001100H
	jl	SHORT $LL6@kernel_mai
$LN10@kernel_mai:

; 63   : 	}
; 64   : 	//	for system use
; 65   : 	pmmgr_deinit_region (0,0x200000);

	push	2097152					; 00200000H
	push	0
	call	?pmmgr_deinit_region@@YAXII@Z		; pmmgr_deinit_region
	add	esp, 8

; 66   : 
; 67   : 	//vmmngr_initialize();
; 68   : 
; 69   : 	ticks = 0;

	mov	DWORD PTR ?ticks@@3IA, 0		; ticks

; 70   : 	init_syscall();

	call	?init_syscall@@YAHXZ			; init_syscall

; 71   : 
; 72   : 	init_proc();

	call	?init_proc@@YAXXZ			; init_proc

; 73   : 	i86_initialize_clock_irq();

	call	?i86_initialize_clock_irq@@YAHXZ	; i86_initialize_clock_irq

; 74   : 	task_start();

	call	?task_start@@YAXXZ			; task_start
	pop	edi

; 75   : 
; 76   : 	return 0;

	xor	eax, eax
	pop	esi

; 77   : }

	ret	0
?kernel_main@@YAHPAU_tag_boot_info@@@Z ENDP		; kernel_main
_TEXT	ENDS
END
