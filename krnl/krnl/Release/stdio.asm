; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	i:\os\10\a\krnl\krnl\stdio.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?tbuf@@3PADA					; tbuf
PUBLIC	?bchars@@3PADA					; bchars
_BSS	SEGMENT
?tbuf@@3PADA DB	020H DUP (?)				; tbuf
_BSS	ENDS
_DATA	SEGMENT
?bchars@@3PADA DB 030H					; bchars
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
_DATA	ENDS
PUBLIC	?itoa@@YAXIIPAD@Z				; itoa
; Function compile flags: /Ogtpy
; File i:\os\10\a\krnl\krnl\stdio.cpp
;	COMDAT ?itoa@@YAXIIPAD@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_base$ = 12						; size = 4
_buf$ = 16						; size = 4
?itoa@@YAXIIPAD@Z PROC					; itoa, COMDAT

; 7    :    int pos = 0;
; 8    :    int opos = 0;
; 9    :    int top = 0;
; 10   : 
; 11   :    if (i == 0 || base > 16) {

	mov	eax, DWORD PTR _i$[esp-4]
	xor	ecx, ecx
	test	eax, eax
	push	esi
	je	SHORT $LN6@itoa
	mov	esi, DWORD PTR _base$[esp]
	cmp	esi, 16					; 00000010H
	ja	SHORT $LN6@itoa
$LL5@itoa:

; 14   :       return;
; 15   :    }
; 16   : 
; 17   :    while (i != 0) {
; 18   :       tbuf[pos] = bchars[i % base];

	xor	edx, edx
	div	esi

; 19   :       pos++;

	add	ecx, 1
	test	eax, eax
	mov	dl, BYTE PTR ?bchars@@3PADA[edx]
	mov	BYTE PTR ?tbuf@@3PADA[ecx-1], dl
	jne	SHORT $LL5@itoa

; 20   :       i /= base;
; 21   :    }
; 22   :    top=pos--;

	mov	esi, ecx
	sub	ecx, 1

; 23   :    for (opos=0; opos<top; pos--,opos++) {

	test	esi, esi
	push	edi
	mov	edi, DWORD PTR _buf$[esp+4]
	jle	SHORT $LN1@itoa

; 20   :       i /= base;
; 21   :    }
; 22   :    top=pos--;

	lea	ecx, DWORD PTR ?tbuf@@3PADA[ecx]
	npad	1
$LL3@itoa:

; 24   :       buf[opos] = tbuf[pos];

	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+edi], dl
	add	eax, 1
	sub	ecx, 1
	cmp	eax, esi
	jl	SHORT $LL3@itoa
$LN1@itoa:

; 25   :    }
; 26   :    buf[opos] = 0;

	mov	BYTE PTR [eax+edi], 0
	pop	edi
	pop	esi

; 27   : }

	ret	0
$LN6@itoa:

; 12   :       buf[0] = '0';

	mov	eax, DWORD PTR _buf$[esp]
	mov	BYTE PTR [eax], 48			; 00000030H

; 13   :       buf[1] = '\0';

	mov	BYTE PTR [eax+1], cl
	pop	esi

; 27   : }

	ret	0
?itoa@@YAXIIPAD@Z ENDP					; itoa
_TEXT	ENDS
PUBLIC	?itoa_s@@YAXHIPAD@Z				; itoa_s
; Function compile flags: /Ogtpy
;	COMDAT ?itoa_s@@YAXHIPAD@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_base$ = 12						; size = 4
_buf$ = 16						; size = 4
?itoa_s@@YAXHIPAD@Z PROC				; itoa_s, COMDAT

; 30   :    if (base > 16) return;

	mov	edx, DWORD PTR _base$[esp-4]
	cmp	edx, 16					; 00000010H
	ja	SHORT $LN3@itoa_s

; 31   :    if (i < 0) {

	mov	eax, DWORD PTR _i$[esp-4]
	test	eax, eax

; 32   :       *buf++ = '-';

	mov	ecx, DWORD PTR _buf$[esp-4]
	jge	SHORT $LN1@itoa_s
	mov	BYTE PTR [ecx], 45			; 0000002dH
	add	ecx, 1

; 33   :       i *= -1;

	neg	eax
$LN1@itoa_s:

; 34   :    }
; 35   :    itoa(i,base,buf);

	mov	DWORD PTR _buf$[esp-4], ecx
	mov	DWORD PTR _base$[esp-4], edx
	mov	DWORD PTR _i$[esp-4], eax
	jmp	?itoa@@YAXIIPAD@Z			; itoa
$LN3@itoa_s:

; 36   : }

	ret	0
?itoa_s@@YAXHIPAD@Z ENDP				; itoa_s
_TEXT	ENDS
END
