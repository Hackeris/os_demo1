; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	i:\os\10\a\krnl\krnl\klib.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?disable_interrupt@@YAXXZ			; disable_interrupt
; Function compile flags: /Ogtpy
; File i:\os\10\a\krnl\krnl\klib.cpp
;	COMDAT ?disable_interrupt@@YAXXZ
_TEXT	SEGMENT
?disable_interrupt@@YAXXZ PROC				; disable_interrupt, COMDAT

; 6    : 	_asm cli

	cli

; 7    : }

	ret	0
?disable_interrupt@@YAXXZ ENDP				; disable_interrupt
_TEXT	ENDS
PUBLIC	?enable_interrupt@@YAXXZ			; enable_interrupt
; Function compile flags: /Ogtpy
;	COMDAT ?enable_interrupt@@YAXXZ
_TEXT	SEGMENT
?enable_interrupt@@YAXXZ PROC				; enable_interrupt, COMDAT

; 11   : 	_asm sti

	sti

; 12   : }

	ret	0
?enable_interrupt@@YAXXZ ENDP				; enable_interrupt
_TEXT	ENDS
PUBLIC	?out_byte@@YAXGE@Z				; out_byte
; Function compile flags: /Ogtpy
;	COMDAT ?out_byte@@YAXGE@Z
_TEXT	SEGMENT
_port$ = 8						; size = 2
_val$ = 12						; size = 1
?out_byte@@YAXGE@Z PROC					; out_byte, COMDAT

; 16   : 	_asm{
; 17   : 		xor edx,edx

	xor	edx, edx

; 18   : 		xor eax,eax

	xor	eax, eax

; 19   : 		mov dx,[port]

	mov	dx, WORD PTR _port$[esp-4]

; 20   : 		mov al,[val]

	mov	al, BYTE PTR _val$[esp-4]

; 21   : 		out	dx,al

	out	dx, al

; 22   : 		nop

	npad	1

; 23   : 	}
; 24   : }

	ret	0
?out_byte@@YAXGE@Z ENDP					; out_byte
_TEXT	ENDS
PUBLIC	?in_byte@@YAEG@Z				; in_byte
; Function compile flags: /Ogtpy
;	COMDAT ?in_byte@@YAEG@Z
_TEXT	SEGMENT
_port$ = 8						; size = 2
?in_byte@@YAEG@Z PROC					; in_byte, COMDAT

; 28   : 	_asm{		
; 29   : 		xor edx,edx

	xor	edx, edx

; 30   : 		xor eax,eax

	xor	eax, eax

; 31   : 		mov dx,[port]

	mov	dx, WORD PTR _port$[esp-4]

; 32   : 		xor	eax,eax

	xor	eax, eax

; 33   : 		in	al,dx

	in	al, dx

; 34   : 		nop

	npad	1

; 35   : 	}
; 36   : }

	ret	0
?in_byte@@YAEG@Z ENDP					; in_byte
_TEXT	ENDS
PUBLIC	?enable_irq@@YAXH@Z				; enable_irq
; Function compile flags: /Ogtpy
;	COMDAT ?enable_irq@@YAXH@Z
_TEXT	SEGMENT
$T2608 = 8						; size = 1
$T2600 = 8						; size = 1
_irq$ = 8						; size = 4
?enable_irq@@YAXH@Z PROC				; enable_irq, COMDAT

; 40   : 	if(irq < 8){

	mov	ecx, DWORD PTR _irq$[esp-4]
	cmp	ecx, 8
	jge	SHORT $LN2@enable_irq

; 41   : 		out_byte(INT_M_CTLMASK,in_byte(INT_M_CTLMASK)& ~(1 << irq));

	xor	edx, edx
	xor	eax, eax
	mov	dx, 33					; 00000021H
	xor	eax, eax
	in	al, dx
	npad	1
	mov	dl, 1
	shl	dl, cl
	not	dl
	and	dl, al
	mov	BYTE PTR $T2600[esp-4], dl
	xor	edx, edx
	xor	eax, eax
	mov	dx, 33					; 00000021H
	mov	al, BYTE PTR $T2600[esp-4]
	out	dx, al
	npad	1

; 45   : 	}
; 46   : }

	ret	0
$LN2@enable_irq:

; 42   : 	}
; 43   : 	else{
; 44   : 		out_byte(INT_S_CTLMASK,in_byte(INT_S_CTLMASK)& ~(1 << irq));

	xor	edx, edx
	xor	eax, eax
	mov	dx, 161					; 000000a1H
	xor	eax, eax
	in	al, dx
	npad	1
	mov	dl, 1
	shl	dl, cl
	not	dl
	and	dl, al
	mov	BYTE PTR $T2608[esp-4], dl
	xor	edx, edx
	xor	eax, eax
	mov	dx, 161					; 000000a1H
	mov	al, BYTE PTR $T2608[esp-4]
	out	dx, al
	npad	1

; 45   : 	}
; 46   : }

	ret	0
?enable_irq@@YAXH@Z ENDP				; enable_irq
_TEXT	ENDS
PUBLIC	?disable_irq@@YAXH@Z				; disable_irq
; Function compile flags: /Ogtpy
;	COMDAT ?disable_irq@@YAXH@Z
_TEXT	SEGMENT
$T2626 = 8						; size = 1
$T2618 = 8						; size = 1
_irq$ = 8						; size = 4
?disable_irq@@YAXH@Z PROC				; disable_irq, COMDAT

; 50   : 	if(irq < 8){

	mov	ecx, DWORD PTR _irq$[esp-4]
	cmp	ecx, 8
	jge	SHORT $LN2@disable_ir

; 51   : 		out_byte(INT_M_CTLMASK,in_byte(INT_M_CTLMASK)| (1 << irq));

	xor	edx, edx
	xor	eax, eax
	mov	dx, 33					; 00000021H
	xor	eax, eax
	in	al, dx
	npad	1
	mov	dl, 1
	shl	dl, cl
	or	dl, al
	mov	BYTE PTR $T2618[esp-4], dl
	xor	edx, edx
	xor	eax, eax
	mov	dx, 33					; 00000021H
	mov	al, BYTE PTR $T2618[esp-4]
	out	dx, al
	npad	1

; 55   : 	}
; 56   : }

	ret	0
$LN2@disable_ir:

; 52   : 	}
; 53   : 	else{
; 54   : 		out_byte(INT_S_CTLMASK,in_byte(INT_S_CTLMASK)| (1 << irq));

	xor	edx, edx
	xor	eax, eax
	mov	dx, 161					; 000000a1H
	xor	eax, eax
	in	al, dx
	npad	1
	mov	dl, 1
	shl	dl, cl
	or	dl, al
	mov	BYTE PTR $T2626[esp-4], dl
	xor	edx, edx
	xor	eax, eax
	mov	dx, 161					; 000000a1H
	mov	al, BYTE PTR $T2626[esp-4]
	out	dx, al
	npad	1

; 55   : 	}
; 56   : }

	ret	0
?disable_irq@@YAXH@Z ENDP				; disable_irq
_TEXT	ENDS
END
