; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	i:\os\10\a\krnl\krnl\exception.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0FM@GCJJFBAK@An?5internal?5error?5was?5detected?4?5@ ; `string'
PUBLIC	??_C@_0BJF@NCFJGJOO@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
;	COMDAT ??_C@_0FM@GCJJFBAK@An?5internal?5error?5was?5detected?4?5@
CONST	SEGMENT
??_C@_0FM@GCJJFBAK@An?5internal?5error?5was?5detected?4?5@ DB 'An interna'
	DB	'l error was detected. The system has been halted.', 0aH, 'Ple'
	DB	'ase restart your computer.', 0aH, 0aH, 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_sickpc	DD	FLAT:??_C@_0BJF@NCFJGJOO@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
_disc	DD	FLAT:??_C@_0FM@GCJJFBAK@An?5internal?5error?5was?5detected?4?5@
_DATA	ENDS
;	COMDAT ??_C@_0BJF@NCFJGJOO@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJF@NCFJGJOO@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB ' '
	DB	'                               _______      ', 0aH, '        '
	DB	'                       |.-----.|    ', 0aH, '                '
	DB	'               ||x . x||    ', 0aH, '                        '
	DB	'       ||_.-._||    ', 0aH, '                               `'
	DB	'--)-(--`    ', 0aH, '                              __[=== o]_'
	DB	'__  ', 0aH, '                             |:::::::::::|\ ', 0aH
	DB	'                             `-=========-`()', 0aH, '        '
	DB	'                      Hackeris OS', 0aH, 0aH, 00H ; `string'
CONST	ENDS
PUBLIC	??_C@_0DK@JPDKLIDN@Divide?5by?50?5at?5physical?5address?5@ ; `string'
PUBLIC	?divide_by_zero_fault@@YAXIII@Z			; divide_by_zero_fault
EXTRN	?DbgPrintf@@YAHPBDZZ:PROC			; DbgPrintf
EXTRN	?DbgSetColor@@YAXE@Z:PROC			; DbgSetColor
EXTRN	?DbgCls@@YAXE@Z:PROC				; DbgCls
;	COMDAT ??_C@_0DK@JPDKLIDN@Divide?5by?50?5at?5physical?5address?5@
; File i:\os\10\a\krnl\krnl\exception.cpp
CONST	SEGMENT
??_C@_0DK@JPDKLIDN@Divide?5by?50?5at?5physical?5address?5@ DB 'Divide by '
	DB	'0 at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?divide_by_zero_fault@@YAXIII@Z
_TEXT	SEGMENT
_eip$ = 8						; size = 4
_cs$ = 12						; size = 4
_flags$ = 16						; size = 4
?divide_by_zero_fault@@YAXIII@Z PROC			; divide_by_zero_fault, COMDAT

; 29   : void _cdecl divide_by_zero_fault (uint32_t eip, uint32_t cs, uint32_t flags) {

	push	ebp
	mov	ebp, esp

; 30   : 
; 31   : 	intstart ();

	cli
	sub	ebp, 4

; 32   : 	kernel_panic ("Divide by 0 at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DK@JPDKLIDN@Divide?5by?50?5at?5physical?5address?5@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@divide_by_:

; 33   : 	for (;;);

	jmp	SHORT $LL2@divide_by_
?divide_by_zero_fault@@YAXIII@Z ENDP			; divide_by_zero_fault
_TEXT	ENDS
PUBLIC	??_C@_0DK@EDMPBNNJ@Single?5step?5at?5physical?5address?5@ ; `string'
PUBLIC	?single_step_trap@@YAXIII@Z			; single_step_trap
;	COMDAT ??_C@_0DK@EDMPBNNJ@Single?5step?5at?5physical?5address?5@
CONST	SEGMENT
??_C@_0DK@EDMPBNNJ@Single?5step?5at?5physical?5address?5@ DB 'Single step'
	DB	' at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?single_step_trap@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_flags$ = 16						; size = 4
?single_step_trap@@YAXIII@Z PROC			; single_step_trap, COMDAT

; 37   : void _cdecl single_step_trap (uint32_t cs, uint32_t eip, uint32_t flags) {

	push	ebp
	mov	ebp, esp

; 38   : 
; 39   : 	intstart ();

	cli
	sub	ebp, 4

; 40   : 	kernel_panic ("Single step at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DK@EDMPBNNJ@Single?5step?5at?5physical?5address?5@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@single_ste:

; 41   : 	for (;;);

	jmp	SHORT $LL2@single_ste
?single_step_trap@@YAXIII@Z ENDP			; single_step_trap
_TEXT	ENDS
PUBLIC	??_C@_0DH@GMCEJAGH@NMI?5trap?5at?5physical?5address?5?$FL0x@ ; `string'
PUBLIC	?nmi_trap@@YAXIII@Z				; nmi_trap
;	COMDAT ??_C@_0DH@GMCEJAGH@NMI?5trap?5at?5physical?5address?5?$FL0x@
CONST	SEGMENT
??_C@_0DH@GMCEJAGH@NMI?5trap?5at?5physical?5address?5?$FL0x@ DB 'NMI trap'
	DB	' at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?nmi_trap@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_flags$ = 16						; size = 4
?nmi_trap@@YAXIII@Z PROC				; nmi_trap, COMDAT

; 45   : void _cdecl nmi_trap (uint32_t cs, uint32_t eip, uint32_t flags) {

	push	ebp
	mov	ebp, esp

; 46   : 
; 47   : 	intstart ();

	cli
	sub	ebp, 4

; 48   : 	kernel_panic ("NMI trap at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DH@GMCEJAGH@NMI?5trap?5at?5physical?5address?5?$FL0x@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@nmi_trap:

; 49   : 	for (;;);

	jmp	SHORT $LL2@nmi_trap
?nmi_trap@@YAXIII@Z ENDP				; nmi_trap
_TEXT	ENDS
PUBLIC	??_C@_0DO@HECKHEPE@Breakpoint?5trap?5at?5physical?5addr@ ; `string'
PUBLIC	?breakpoint_trap@@YAXIII@Z			; breakpoint_trap
;	COMDAT ??_C@_0DO@HECKHEPE@Breakpoint?5trap?5at?5physical?5addr@
CONST	SEGMENT
??_C@_0DO@HECKHEPE@Breakpoint?5trap?5at?5physical?5addr@ DB 'Breakpoint t'
	DB	'rap at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?breakpoint_trap@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_flags$ = 16						; size = 4
?breakpoint_trap@@YAXIII@Z PROC				; breakpoint_trap, COMDAT

; 53   : void _cdecl breakpoint_trap (uint32_t cs, uint32_t eip, uint32_t flags) {

	push	ebp
	mov	ebp, esp

; 54   : 
; 55   : 	intstart ();

	cli
	sub	ebp, 4

; 56   : 	kernel_panic ("Breakpoint trap at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DO@HECKHEPE@Breakpoint?5trap?5at?5physical?5addr@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@breakpoint:

; 57   : 	for (;;);

	jmp	SHORT $LL2@breakpoint
?breakpoint_trap@@YAXIII@Z ENDP				; breakpoint_trap
_TEXT	ENDS
PUBLIC	??_C@_0DM@MNLOBONG@Overflow?5trap?5at?5physical?5addres@ ; `string'
PUBLIC	?overflow_trap@@YAXIII@Z			; overflow_trap
;	COMDAT ??_C@_0DM@MNLOBONG@Overflow?5trap?5at?5physical?5addres@
CONST	SEGMENT
??_C@_0DM@MNLOBONG@Overflow?5trap?5at?5physical?5addres@ DB 'Overflow tra'
	DB	'p at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?overflow_trap@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_flags$ = 16						; size = 4
?overflow_trap@@YAXIII@Z PROC				; overflow_trap, COMDAT

; 61   : void _cdecl overflow_trap (uint32_t cs, uint32_t eip, uint32_t flags) {

	push	ebp
	mov	ebp, esp

; 62   : 
; 63   : 	intstart ();

	cli
	sub	ebp, 4

; 64   : 	kernel_panic ("Overflow trap at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DM@MNLOBONG@Overflow?5trap?5at?5physical?5addres@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@overflow_t:

; 65   : 	for (;;);

	jmp	SHORT $LL2@overflow_t
?overflow_trap@@YAXIII@Z ENDP				; overflow_trap
_TEXT	ENDS
PUBLIC	??_C@_0EB@HFKENDCB@Bounds?5check?5fault?5at?5physical?5a@ ; `string'
PUBLIC	?bounds_check_fault@@YAXIII@Z			; bounds_check_fault
;	COMDAT ??_C@_0EB@HFKENDCB@Bounds?5check?5fault?5at?5physical?5a@
CONST	SEGMENT
??_C@_0EB@HFKENDCB@Bounds?5check?5fault?5at?5physical?5a@ DB 'Bounds chec'
	DB	'k fault at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?bounds_check_fault@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_flags$ = 16						; size = 4
?bounds_check_fault@@YAXIII@Z PROC			; bounds_check_fault, COMDAT

; 69   : void _cdecl bounds_check_fault (uint32_t cs, uint32_t  eip, uint32_t flags) {

	push	ebp
	mov	ebp, esp

; 70   : 
; 71   : 	intstart ();

	cli
	sub	ebp, 4

; 72   : 	kernel_panic ("Bounds check fault at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0EB@HFKENDCB@Bounds?5check?5fault?5at?5physical?5a@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@bounds_che:

; 73   : 	for (;;);

	jmp	SHORT $LL2@bounds_che
?bounds_check_fault@@YAXIII@Z ENDP			; bounds_check_fault
_TEXT	ENDS
PUBLIC	??_C@_0DN@FMJKFMBE@Invalid?5opcode?5at?5physical?5addre@ ; `string'
PUBLIC	?invalid_opcode_fault@@YAXIII@Z			; invalid_opcode_fault
;	COMDAT ??_C@_0DN@FMJKFMBE@Invalid?5opcode?5at?5physical?5addre@
CONST	SEGMENT
??_C@_0DN@FMJKFMBE@Invalid?5opcode?5at?5physical?5addre@ DB 'Invalid opco'
	DB	'de at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?invalid_opcode_fault@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_flags$ = 16						; size = 4
?invalid_opcode_fault@@YAXIII@Z PROC			; invalid_opcode_fault, COMDAT

; 77   : void _cdecl invalid_opcode_fault (uint32_t cs, uint32_t  eip, uint32_t flags) {

	push	ebp
	mov	ebp, esp

; 78   : 
; 79   : 	intstart ();

	cli
	sub	ebp, 4

; 80   : 	kernel_panic ("Invalid opcode at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DN@FMJKFMBE@Invalid?5opcode?5at?5physical?5addre@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@invalid_op:

; 81   : 	for (;;);

	jmp	SHORT $LL2@invalid_op
?invalid_opcode_fault@@YAXIII@Z ENDP			; invalid_opcode_fault
_TEXT	ENDS
PUBLIC	??_C@_0EF@KCMEFAME@Device?5not?5found?5fault?5at?5physic@ ; `string'
PUBLIC	?no_device_fault@@YAXIII@Z			; no_device_fault
;	COMDAT ??_C@_0EF@KCMEFAME@Device?5not?5found?5fault?5at?5physic@
CONST	SEGMENT
??_C@_0EF@KCMEFAME@Device?5not?5found?5fault?5at?5physic@ DB 'Device not '
	DB	'found fault at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?no_device_fault@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_flags$ = 16						; size = 4
?no_device_fault@@YAXIII@Z PROC				; no_device_fault, COMDAT

; 85   : void _cdecl no_device_fault (uint32_t cs, uint32_t eip, uint32_t flags) {

	push	ebp
	mov	ebp, esp

; 86   : 
; 87   : 	intstart ();

	cli
	sub	ebp, 4

; 88   : 	kernel_panic ("Device not found fault at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0EF@KCMEFAME@Device?5not?5found?5fault?5at?5physic@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@no_device_:

; 89   : 	for (;;);

	jmp	SHORT $LL2@no_device_
?no_device_fault@@YAXIII@Z ENDP				; no_device_fault
_TEXT	ENDS
PUBLIC	??_C@_0DL@BJKFIMCG@Double?5fault?5at?5physical?5address@ ; `string'
PUBLIC	?double_fault_abort@@YAXIIII@Z			; double_fault_abort
;	COMDAT ??_C@_0DL@BJKFIMCG@Double?5fault?5at?5physical?5address@
CONST	SEGMENT
??_C@_0DL@BJKFIMCG@Double?5fault?5at?5physical?5address@ DB 'Double fault'
	DB	' at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?double_fault_abort@@YAXIIII@Z
_TEXT	SEGMENT
_eip$ = 8						; size = 4
_cs$ = 12						; size = 4
_flags$ = 16						; size = 4
_err$ = 20						; size = 4
?double_fault_abort@@YAXIIII@Z PROC			; double_fault_abort, COMDAT

; 93   : void _cdecl double_fault_abort (uint32_t eip,uint32_t cs,uint32_t flags,uint32_t err)  {

	push	ebp
	mov	ebp, esp

; 94   : 
; 95   : 	intstart ();

	cli
	sub	ebp, 4

; 96   : 	kernel_panic ("Double fault at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DL@BJKFIMCG@Double?5fault?5at?5physical?5address@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@double_fau:

; 97   : 	for (;;);

	jmp	SHORT $LL2@double_fau
?double_fault_abort@@YAXIIII@Z ENDP			; double_fault_abort
_TEXT	ENDS
PUBLIC	??_C@_0DK@KHBDCCLO@Invalid?5TSS?5at?5physical?5address?5@ ; `string'
PUBLIC	?invalid_tss_fault@@YAXIIII@Z			; invalid_tss_fault
;	COMDAT ??_C@_0DK@KHBDCCLO@Invalid?5TSS?5at?5physical?5address?5@
CONST	SEGMENT
??_C@_0DK@KHBDCCLO@Invalid?5TSS?5at?5physical?5address?5@ DB 'Invalid TSS'
	DB	' at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?invalid_tss_fault@@YAXIIII@Z
_TEXT	SEGMENT
_eip$ = 8						; size = 4
_cs$ = 12						; size = 4
_flags$ = 16						; size = 4
_err$ = 20						; size = 4
?invalid_tss_fault@@YAXIIII@Z PROC			; invalid_tss_fault, COMDAT

; 101  : void _cdecl invalid_tss_fault (uint32_t eip,uint32_t cs,uint32_t flags,uint32_t err) {

	push	ebp
	mov	ebp, esp

; 102  : 
; 103  : 	intstart ();

	cli
	sub	ebp, 4

; 104  : 	kernel_panic ("Invalid TSS at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DK@KHBDCCLO@Invalid?5TSS?5at?5physical?5address?5@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@invalid_ts:

; 105  : 	for (;;);

	jmp	SHORT $LL2@invalid_ts
?invalid_tss_fault@@YAXIIII@Z ENDP			; invalid_tss_fault
_TEXT	ENDS
PUBLIC	??_C@_0DO@CBMNIOP@Invalid?5segment?5at?5physical?5addr@ ; `string'
PUBLIC	?no_segment_fault@@YAXIIII@Z			; no_segment_fault
;	COMDAT ??_C@_0DO@CBMNIOP@Invalid?5segment?5at?5physical?5addr@
CONST	SEGMENT
??_C@_0DO@CBMNIOP@Invalid?5segment?5at?5physical?5addr@ DB 'Invalid segme'
	DB	'nt at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?no_segment_fault@@YAXIIII@Z
_TEXT	SEGMENT
_eip$ = 8						; size = 4
_cs$ = 12						; size = 4
_flags$ = 16						; size = 4
_err$ = 20						; size = 4
?no_segment_fault@@YAXIIII@Z PROC			; no_segment_fault, COMDAT

; 109  : void _cdecl no_segment_fault (uint32_t eip,uint32_t cs,uint32_t flags,uint32_t err)  {

	push	ebp
	mov	ebp, esp

; 110  : 
; 111  : 	intstart ();

	cli
	sub	ebp, 4

; 112  : 	kernel_panic ("Invalid segment at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DO@CBMNIOP@Invalid?5segment?5at?5physical?5addr@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@no_segment:

; 113  : 	for (;;);

	jmp	SHORT $LL2@no_segment
?no_segment_fault@@YAXIIII@Z ENDP			; no_segment_fault
_TEXT	ENDS
PUBLIC	??_C@_0DK@KPJEDBGP@Stack?5fault?5at?5physical?5address?5@ ; `string'
PUBLIC	?stack_fault@@YAXIIII@Z				; stack_fault
;	COMDAT ??_C@_0DK@KPJEDBGP@Stack?5fault?5at?5physical?5address?5@
CONST	SEGMENT
??_C@_0DK@KPJEDBGP@Stack?5fault?5at?5physical?5address?5@ DB 'Stack fault'
	DB	' at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?stack_fault@@YAXIIII@Z
_TEXT	SEGMENT
_eip$ = 8						; size = 4
_cs$ = 12						; size = 4
_flags$ = 16						; size = 4
_err$ = 20						; size = 4
?stack_fault@@YAXIIII@Z PROC				; stack_fault, COMDAT

; 117  : void _cdecl stack_fault (uint32_t eip,uint32_t cs,uint32_t flags,uint32_t err)  {

	push	ebp
	mov	ebp, esp

; 118  : 
; 119  : 	intstart ();

	cli
	sub	ebp, 4

; 120  : 	kernel_panic ("Stack fault at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DK@KPJEDBGP@Stack?5fault?5at?5physical?5address?5@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@stack_faul:

; 121  : 	for (;;);

	jmp	SHORT $LL2@stack_faul
?stack_fault@@YAXIIII@Z ENDP				; stack_fault
_TEXT	ENDS
PUBLIC	??_C@_0EH@GNLNLLGH@General?5Protection?5Fault?5at?5phys@ ; `string'
PUBLIC	?general_protection_fault@@YAXIIII@Z		; general_protection_fault
;	COMDAT ??_C@_0EH@GNLNLLGH@General?5Protection?5Fault?5at?5phys@
CONST	SEGMENT
??_C@_0EH@GNLNLLGH@General?5Protection?5Fault?5at?5phys@ DB 'General Prot'
	DB	'ection Fault at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?general_protection_fault@@YAXIIII@Z
_TEXT	SEGMENT
_eip$ = 8						; size = 4
_cs$ = 12						; size = 4
_flags$ = 16						; size = 4
_err$ = 20						; size = 4
?general_protection_fault@@YAXIIII@Z PROC		; general_protection_fault, COMDAT

; 125  : void _cdecl general_protection_fault (uint32_t eip,uint32_t cs,uint32_t flags,uint32_t err)  {

	push	ebp
	mov	ebp, esp

; 126  : 
; 127  : 	intstart ();

	cli
	sub	ebp, 4

; 128  : 	kernel_panic ("General Protection Fault at physical address [0x%x:0x%x] EFLAGS [0x%x]",

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf

; 129  : 		cs,cs, cs);

	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	push	eax
	push	eax
	push	OFFSET ??_C@_0EH@GNLNLLGH@General?5Protection?5Fault?5at?5phys@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
	npad	1
$LL2@general_pr:

; 130  : 	for (;;);

	jmp	SHORT $LL2@general_pr
?general_protection_fault@@YAXIIII@Z ENDP		; general_protection_fault
_TEXT	ENDS
PUBLIC	??_C@_0DB@ONAGEJDI@Page?5Fault?5at?50x?$CFx?30x?$CFx?5refrence@ ; `string'
PUBLIC	?page_fault@@YAXIIII@Z				; page_fault
;	COMDAT ??_C@_0DB@ONAGEJDI@Page?5Fault?5at?50x?$CFx?30x?$CFx?5refrence@
CONST	SEGMENT
??_C@_0DB@ONAGEJDI@Page?5Fault?5at?50x?$CFx?30x?$CFx?5refrence@ DB 'Page '
	DB	'Fault at 0x%x:0x%x refrenced memory at 0x%x', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?page_fault@@YAXIIII@Z
_TEXT	SEGMENT
_faultAddr$ = -4					; size = 4
_eip$ = 8						; size = 4
_cs$ = 12						; size = 4
_flags$ = 16						; size = 4
_err$ = 20						; size = 4
?page_fault@@YAXIIII@Z PROC				; page_fault, COMDAT

; 135  : void _cdecl page_fault (uint32_t eip,uint32_t cs,uint32_t flags,uint32_t err) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 136  : 
; 137  : 	intstart ();

	cli
	sub	ebp, 4

; 138  : 
; 139  : 	int faultAddr=0;

	mov	DWORD PTR _faultAddr$[ebp], 0

; 140  : 
; 141  : 	_asm {
; 142  : 		mov eax, cr2

	mov	eax, cr2

; 143  : 		mov [faultAddr], eax

	mov	DWORD PTR _faultAddr$[ebp], eax

; 144  : 	}
; 145  : 
; 146  : 	kernel_panic ("Page Fault at 0x%x:0x%x refrenced memory at 0x%x",

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf

; 147  : 		cs, eip, faultAddr);

	mov	edx, DWORD PTR _faultAddr$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DB@ONAGEJDI@Page?5Fault?5at?50x?$CFx?30x?$CFx?5refrence@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@page_fault:

; 148  : 	for (;;);

	jmp	SHORT $LL2@page_fault
?page_fault@@YAXIIII@Z ENDP				; page_fault
_TEXT	ENDS
PUBLIC	??_C@_0DI@IOMECPMK@FPU?5Fault?5at?5physical?5address?5?$FL0@ ; `string'
PUBLIC	?fpu_fault@@YAXIII@Z				; fpu_fault
;	COMDAT ??_C@_0DI@IOMECPMK@FPU?5Fault?5at?5physical?5address?5?$FL0@
CONST	SEGMENT
??_C@_0DI@IOMECPMK@FPU?5Fault?5at?5physical?5address?5?$FL0@ DB 'FPU Faul'
	DB	't at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?fpu_fault@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_flags$ = 16						; size = 4
?fpu_fault@@YAXIII@Z PROC				; fpu_fault, COMDAT

; 153  : 
; 154  : 	intstart ();

	cli
	sub	ebp, 4

; 155  : 	kernel_panic ("FPU Fault at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DI@IOMECPMK@FPU?5Fault?5at?5physical?5address?5?$FL0@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@fpu_fault:

; 156  : 	for (;;);

	jmp	SHORT $LL2@fpu_fault
?fpu_fault@@YAXIII@Z ENDP				; fpu_fault
_TEXT	ENDS
PUBLIC	??_C@_0DO@NIKHDGLG@Alignment?5Check?5at?5physical?5addr@ ; `string'
PUBLIC	?alignment_check_fault@@YAXIIII@Z		; alignment_check_fault
;	COMDAT ??_C@_0DO@NIKHDGLG@Alignment?5Check?5at?5physical?5addr@
CONST	SEGMENT
??_C@_0DO@NIKHDGLG@Alignment?5Check?5at?5physical?5addr@ DB 'Alignment Ch'
	DB	'eck at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?alignment_check_fault@@YAXIIII@Z
_TEXT	SEGMENT
_eip$ = 8						; size = 4
_cs$ = 12						; size = 4
_flags$ = 16						; size = 4
_err$ = 20						; size = 4
?alignment_check_fault@@YAXIIII@Z PROC			; alignment_check_fault, COMDAT

; 161  : 
; 162  : 	intstart ();

	cli
	sub	ebp, 4

; 163  : 	kernel_panic ("Alignment Check at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DO@NIKHDGLG@Alignment?5Check?5at?5physical?5addr@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@alignment_:

; 164  : 	for (;;);

	jmp	SHORT $LL2@alignment_
?alignment_check_fault@@YAXIIII@Z ENDP			; alignment_check_fault
_TEXT	ENDS
PUBLIC	??_C@_0DM@OKKADJIB@Machine?5Check?5at?5physical?5addres@ ; `string'
PUBLIC	?machine_check_abort@@YAXIII@Z			; machine_check_abort
;	COMDAT ??_C@_0DM@OKKADJIB@Machine?5Check?5at?5physical?5addres@
CONST	SEGMENT
??_C@_0DM@OKKADJIB@Machine?5Check?5at?5physical?5addres@ DB 'Machine Chec'
	DB	'k at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?machine_check_abort@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_flags$ = 16						; size = 4
?machine_check_abort@@YAXIII@Z PROC			; machine_check_abort, COMDAT

; 169  : 
; 170  : 	intstart ();

	cli
	sub	ebp, 4

; 171  : 	kernel_panic ("Machine Check at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DM@OKKADJIB@Machine?5Check?5at?5physical?5addres@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@machine_ch:

; 172  : 	for (;;);

	jmp	SHORT $LL2@machine_ch
?machine_check_abort@@YAXIII@Z ENDP			; machine_check_abort
_TEXT	ENDS
PUBLIC	??_C@_0DN@OBNBAIHA@FPU?5SIMD?5fault?5at?5physical?5addre@ ; `string'
PUBLIC	?simd_fpu_fault@@YAXIII@Z			; simd_fpu_fault
;	COMDAT ??_C@_0DN@OBNBAIHA@FPU?5SIMD?5fault?5at?5physical?5addre@
CONST	SEGMENT
??_C@_0DN@OBNBAIHA@FPU?5SIMD?5fault?5at?5physical?5addre@ DB 'FPU SIMD fa'
	DB	'ult at physical address [0x%x:0x%x] EFLAGS [0x%x]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?simd_fpu_fault@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_flags$ = 16						; size = 4
?simd_fpu_fault@@YAXIII@Z PROC				; simd_fpu_fault, COMDAT

; 177  : 
; 178  : 	intstart ();

	cli
	sub	ebp, 4

; 179  : 	kernel_panic ("FPU SIMD fault at physical address [0x%x:0x%x] EFLAGS [0x%x]",cs,eip, flags);

	push	19					; 00000013H
	call	?DbgCls@@YAXE@Z				; DbgCls
	push	23					; 00000017H
	call	?DbgSetColor@@YAXE@Z			; DbgSetColor
	mov	eax, DWORD PTR _disc
	push	eax
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	ecx, DWORD PTR _sickpc
	push	ecx
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	mov	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _eip$[ebp]
	mov	ecx, DWORD PTR _cs$[ebp]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DN@OBNBAIHA@FPU?5SIMD?5fault?5at?5physical?5addre@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf
	add	esp, 32					; 00000020H
$LL2@simd_fpu_f:

; 180  : 	for (;;);

	jmp	SHORT $LL2@simd_fpu_f
?simd_fpu_fault@@YAXIII@Z ENDP				; simd_fpu_fault
_TEXT	ENDS
PUBLIC	?install_def_irq@@YAXXZ				; install_def_irq
EXTRN	?setvect@@YAXHP6AXXZ@Z:PROC			; setvect
EXTRN	?enable_interrupt@@YAXXZ:PROC			; enable_interrupt
; Function compile flags: /Ogtpy
;	COMDAT ?install_def_irq@@YAXXZ
_TEXT	SEGMENT
?install_def_irq@@YAXXZ PROC				; install_def_irq, COMDAT

; 185  : 	enable_interrupt();

	call	?enable_interrupt@@YAXXZ		; enable_interrupt

; 186  : 	setvect (0,(void (__cdecl &)(void))divide_by_zero_fault);

	push	OFFSET ?divide_by_zero_fault@@YAXIII@Z	; divide_by_zero_fault
	push	0
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 187  : 	setvect (1,(void (__cdecl &)(void))single_step_trap);

	push	OFFSET ?single_step_trap@@YAXIII@Z	; single_step_trap
	push	1
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 188  : 	setvect (2,(void (__cdecl &)(void))nmi_trap);

	push	OFFSET ?nmi_trap@@YAXIII@Z		; nmi_trap
	push	2
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 189  : 	setvect (3,(void (__cdecl &)(void))breakpoint_trap);

	push	OFFSET ?breakpoint_trap@@YAXIII@Z	; breakpoint_trap
	push	3
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 190  : 	setvect (4,(void (__cdecl &)(void))overflow_trap);

	push	OFFSET ?overflow_trap@@YAXIII@Z		; overflow_trap
	push	4
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 191  : 	setvect (5,(void (__cdecl &)(void))bounds_check_fault);

	push	OFFSET ?bounds_check_fault@@YAXIII@Z	; bounds_check_fault
	push	5
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 192  : 	setvect (6,(void (__cdecl &)(void))invalid_opcode_fault);

	push	OFFSET ?invalid_opcode_fault@@YAXIII@Z	; invalid_opcode_fault
	push	6
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 193  : 	setvect (7,(void (__cdecl &)(void))no_device_fault);

	push	OFFSET ?no_device_fault@@YAXIII@Z	; no_device_fault
	push	7
	call	?setvect@@YAXHP6AXXZ@Z			; setvect
	add	esp, 64					; 00000040H

; 194  : 	setvect (8,(void (__cdecl &)(void))double_fault_abort);

	push	OFFSET ?double_fault_abort@@YAXIIII@Z	; double_fault_abort
	push	8
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 195  : 	setvect (10,(void (__cdecl &)(void))invalid_tss_fault);

	push	OFFSET ?invalid_tss_fault@@YAXIIII@Z	; invalid_tss_fault
	push	10					; 0000000aH
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 196  : 	setvect (11,(void (__cdecl &)(void))no_segment_fault);

	push	OFFSET ?no_segment_fault@@YAXIIII@Z	; no_segment_fault
	push	11					; 0000000bH
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 197  : 	setvect (12,(void (__cdecl &)(void))stack_fault);

	push	OFFSET ?stack_fault@@YAXIIII@Z		; stack_fault
	push	12					; 0000000cH
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 198  : 	setvect (13,(void (__cdecl &)(void))general_protection_fault);

	push	OFFSET ?general_protection_fault@@YAXIIII@Z ; general_protection_fault
	push	13					; 0000000dH
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 199  : 	setvect (14,(void (__cdecl &)(void))page_fault);

	push	OFFSET ?page_fault@@YAXIIII@Z		; page_fault
	push	14					; 0000000eH
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 200  : 	setvect (16,(void (__cdecl &)(void))fpu_fault);

	push	OFFSET ?fpu_fault@@YAXIII@Z		; fpu_fault
	push	16					; 00000010H
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 201  : 	setvect (17,(void (__cdecl &)(void))alignment_check_fault);

	push	OFFSET ?alignment_check_fault@@YAXIIII@Z ; alignment_check_fault
	push	17					; 00000011H
	call	?setvect@@YAXHP6AXXZ@Z			; setvect
	add	esp, 64					; 00000040H

; 202  : 	setvect (18,(void (__cdecl &)(void))machine_check_abort);

	push	OFFSET ?machine_check_abort@@YAXIII@Z	; machine_check_abort
	push	18					; 00000012H
	call	?setvect@@YAXHP6AXXZ@Z			; setvect

; 203  : 	setvect (19,(void (__cdecl &)(void))simd_fpu_fault);

	push	OFFSET ?simd_fpu_fault@@YAXIII@Z	; simd_fpu_fault
	push	19					; 00000013H
	call	?setvect@@YAXHP6AXXZ@Z			; setvect
	add	esp, 16					; 00000010H

; 204  : }

	ret	0
?install_def_irq@@YAXXZ ENDP				; install_def_irq
_TEXT	ENDS
END
