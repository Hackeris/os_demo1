; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	i:\os\10\a\krnl\krnl\kbd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ctrl_r@@3HA					; ctrl_r
PUBLIC	?kbd_in@@3U_tagS_KB@@A				; kbd_in
PUBLIC	?alt_l@@3HA					; alt_l
PUBLIC	?alt_r@@3HA					; alt_r
PUBLIC	?num_lock@@3HA					; num_lock
PUBLIC	?shift_l@@3HA					; shift_l
PUBLIC	?scroll_lock@@3HA				; scroll_lock
PUBLIC	?ctrl_l@@3HA					; ctrl_l
PUBLIC	?column@@3HA					; column
PUBLIC	?shift_r@@3HA					; shift_r
PUBLIC	?caps_lock@@3HA					; caps_lock
PUBLIC	?_scan_code@@3EA				; _scan_code
PUBLIC	?keymap@@3PAIA					; keymap
PUBLIC	?code_with_E0@@3HA				; code_with_E0
_BSS	SEGMENT
?ctrl_r@@3HA DD	01H DUP (?)				; ctrl_r
?kbd_in@@3U_tagS_KB@@A DB 02cH DUP (?)			; kbd_in
?alt_l@@3HA DD	01H DUP (?)				; alt_l
?alt_r@@3HA DD	01H DUP (?)				; alt_r
?num_lock@@3HA DD 01H DUP (?)				; num_lock
?shift_l@@3HA DD 01H DUP (?)				; shift_l
?scroll_lock@@3HA DD 01H DUP (?)			; scroll_lock
?ctrl_l@@3HA DD	01H DUP (?)				; ctrl_l
?column@@3HA DD	01H DUP (?)				; column
?shift_r@@3HA DD 01H DUP (?)				; shift_r
?caps_lock@@3HA DD 01H DUP (?)				; caps_lock
?_scan_code@@3EA DB 01H DUP (?)				; _scan_code
	ALIGN	4

?code_with_E0@@3HA DD 01H DUP (?)			; code_with_E0
_BSS	ENDS
CONST	SEGMENT
_pause_scode DB	0e1H
	DB	01dH
	DB	045H
	DB	0e1H
	DB	09dH
	DB	0c5H
CONST	ENDS
_DATA	SEGMENT
?keymap@@3PAIA DD 00H					; keymap
	DD	00H
	DD	00H
	DD	0101H
	DD	0101H
	DD	00H
	DD	031H
	DD	021H
	DD	00H
	DD	032H
	DD	040H
	DD	00H
	DD	033H
	DD	023H
	DD	00H
	DD	034H
	DD	024H
	DD	00H
	DD	035H
	DD	025H
	DD	00H
	DD	036H
	DD	05eH
	DD	00H
	DD	037H
	DD	026H
	DD	00H
	DD	038H
	DD	02aH
	DD	00H
	DD	039H
	DD	028H
	DD	00H
	DD	030H
	DD	029H
	DD	00H
	DD	02dH
	DD	05fH
	DD	00H
	DD	03dH
	DD	02bH
	DD	00H
	DD	0104H
	DD	0104H
	DD	00H
	DD	0102H
	DD	0102H
	DD	00H
	DD	071H
	DD	051H
	DD	00H
	DD	077H
	DD	057H
	DD	00H
	DD	065H
	DD	045H
	DD	00H
	DD	072H
	DD	052H
	DD	00H
	DD	074H
	DD	054H
	DD	00H
	DD	079H
	DD	059H
	DD	00H
	DD	075H
	DD	055H
	DD	00H
	DD	069H
	DD	049H
	DD	00H
	DD	06fH
	DD	04fH
	DD	00H
	DD	070H
	DD	050H
	DD	00H
	DD	05bH
	DD	07bH
	DD	00H
	DD	05dH
	DD	07dH
	DD	00H
	DD	0103H
	DD	0103H
	DD	0130H
	DD	010aH
	DD	010aH
	DD	010bH
	DD	061H
	DD	041H
	DD	00H
	DD	073H
	DD	053H
	DD	00H
	DD	064H
	DD	044H
	DD	00H
	DD	066H
	DD	046H
	DD	00H
	DD	067H
	DD	047H
	DD	00H
	DD	068H
	DD	048H
	DD	00H
	DD	06aH
	DD	04aH
	DD	00H
	DD	06bH
	DD	04bH
	DD	00H
	DD	06cH
	DD	04cH
	DD	00H
	DD	03bH
	DD	03aH
	DD	00H
	DD	027H
	DD	022H
	DD	00H
	DD	060H
	DD	07eH
	DD	00H
	DD	0108H
	DD	0108H
	DD	00H
	DD	05cH
	DD	07cH
	DD	00H
	DD	07aH
	DD	05aH
	DD	00H
	DD	078H
	DD	058H
	DD	00H
	DD	063H
	DD	043H
	DD	00H
	DD	076H
	DD	056H
	DD	00H
	DD	062H
	DD	042H
	DD	00H
	DD	06eH
	DD	04eH
	DD	00H
	DD	06dH
	DD	04dH
	DD	00H
	DD	02cH
	DD	03cH
	DD	00H
	DD	02eH
	DD	03eH
	DD	00H
	DD	02fH
	DD	03fH
	DD	012cH
	DD	0109H
	DD	0109H
	DD	00H
	DD	02aH
	DD	02aH
	DD	00H
	DD	010cH
	DD	010cH
	DD	010dH
	DD	020H
	DD	020H
	DD	00H
	DD	010eH
	DD	010eH
	DD	00H
	DD	0111H
	DD	0111H
	DD	00H
	DD	0112H
	DD	0112H
	DD	00H
	DD	0113H
	DD	0113H
	DD	00H
	DD	0114H
	DD	0114H
	DD	00H
	DD	0115H
	DD	0115H
	DD	00H
	DD	0116H
	DD	0116H
	DD	00H
	DD	0117H
	DD	0117H
	DD	00H
	DD	0118H
	DD	0118H
	DD	00H
	DD	0119H
	DD	0119H
	DD	00H
	DD	011aH
	DD	011aH
	DD	00H
	DD	010fH
	DD	010fH
	DD	00H
	DD	0110H
	DD	0110H
	DD	00H
	DD	0139H
	DD	037H
	DD	0121H
	DD	013aH
	DD	038H
	DD	0125H
	DD	013bH
	DD	039H
	DD	0123H
	DD	012eH
	DD	02dH
	DD	00H
	DD	0136H
	DD	034H
	DD	0127H
	DD	0137H
	DD	035H
	DD	00H
	DD	0138H
	DD	036H
	DD	0128H
	DD	012fH
	DD	02bH
	DD	00H
	DD	0133H
	DD	031H
	DD	0122H
	DD	0134H
	DD	032H
	DD	0126H
	DD	0135H
	DD	033H
	DD	0124H
	DD	0132H
	DD	030H
	DD	011fH
	DD	0131H
	DD	02eH
	DD	0120H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	011bH
	DD	011bH
	DD	00H
	DD	011cH
	DD	011cH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0105H
	DD	00H
	DD	00H
	DD	0106H
	DD	00H
	DD	00H
	DD	0107H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	?keyboard_irq_handler@@YAXH@Z			; keyboard_irq_handler
; Function compile flags: /Ogtpy
; File i:\os\10\a\krnl\krnl\kbd.cpp
;	COMDAT ?keyboard_irq_handler@@YAXH@Z
_TEXT	SEGMENT
_irq$ = 8						; size = 4
?keyboard_irq_handler@@YAXH@Z PROC			; keyboard_irq_handler, COMDAT

; 207  : 	//	the handler just save received scan code
; 208  : 	if(kbd_in.count < KB_IN_BYTES){

	cmp	DWORD PTR ?kbd_in@@3U_tagS_KB@@A+8, 32	; 00000020H
	jge	SHORT $LN2@keyboard_i

; 209  : 		*(kbd_in.p_head) = _scan_code;

	mov	eax, DWORD PTR ?kbd_in@@3U_tagS_KB@@A
	mov	cl, BYTE PTR ?_scan_code@@3EA		; _scan_code
	mov	BYTE PTR [eax], cl

; 210  : 		kbd_in.p_head ++;

	mov	eax, DWORD PTR ?kbd_in@@3U_tagS_KB@@A
	add	eax, 1

; 211  : 		if(kbd_in.p_head == kbd_in.buf + KB_IN_BYTES){

	cmp	eax, OFFSET ?kbd_in@@3U_tagS_KB@@A+44
	mov	DWORD PTR ?kbd_in@@3U_tagS_KB@@A, eax
	jne	SHORT $LN1@keyboard_i

; 212  : 			kbd_in.p_head = kbd_in.buf;

	mov	DWORD PTR ?kbd_in@@3U_tagS_KB@@A, OFFSET ?kbd_in@@3U_tagS_KB@@A+12
$LN1@keyboard_i:

; 213  : 		}
; 214  : 		kbd_in.count ++;

	add	DWORD PTR ?kbd_in@@3U_tagS_KB@@A+8, 1
$LN2@keyboard_i:

; 215  : 	}
; 216  : }

	ret	0
?keyboard_irq_handler@@YAXH@Z ENDP			; keyboard_irq_handler
_TEXT	ENDS
PUBLIC	?get_byte_from_kbuf@@YAEXZ			; get_byte_from_kbuf
EXTRN	?enable_interrupt@@YAXXZ:PROC			; enable_interrupt
EXTRN	?disable_interrupt@@YAXXZ:PROC			; disable_interrupt
; Function compile flags: /Ogtpy
;	COMDAT ?get_byte_from_kbuf@@YAEXZ
_TEXT	SEGMENT
?get_byte_from_kbuf@@YAEXZ PROC				; get_byte_from_kbuf, COMDAT

; 220  : 	uint8_t		scan_code = 0;
; 221  : 
; 222  : 	while(kbd_in.count <= 0){_asm nop}

	cmp	DWORD PTR ?kbd_in@@3U_tagS_KB@@A+8, 0
	jg	SHORT $LN2@get_byte_f
	npad	7
$LL3@get_byte_f:
	npad	1
	cmp	DWORD PTR ?kbd_in@@3U_tagS_KB@@A+8, 0
	jle	SHORT $LL3@get_byte_f
$LN2@get_byte_f:
	push	ebx

; 223  : 
; 224  : 	disable_interrupt();

	call	?disable_interrupt@@YAXXZ		; disable_interrupt

; 225  : 	scan_code = *(kbd_in.p_tail);

	mov	eax, DWORD PTR ?kbd_in@@3U_tagS_KB@@A+4
	mov	bl, BYTE PTR [eax]

; 226  : 	kbd_in.p_tail ++;

	add	eax, 1

; 227  : 	if(kbd_in.p_tail == kbd_in.buf + KB_IN_BYTES){

	cmp	eax, OFFSET ?kbd_in@@3U_tagS_KB@@A+44
	mov	DWORD PTR ?kbd_in@@3U_tagS_KB@@A+4, eax
	jne	SHORT $LN1@get_byte_f

; 228  : 		kbd_in.p_tail = kbd_in.buf;

	mov	DWORD PTR ?kbd_in@@3U_tagS_KB@@A+4, OFFSET ?kbd_in@@3U_tagS_KB@@A+12
$LN1@get_byte_f:

; 229  : 	}
; 230  : 	kbd_in.count --;

	sub	DWORD PTR ?kbd_in@@3U_tagS_KB@@A+8, 1

; 231  : 	enable_interrupt();

	call	?enable_interrupt@@YAXXZ		; enable_interrupt

; 232  : 
; 233  : 	return scan_code;

	mov	al, bl
	pop	ebx

; 234  : }

	ret	0
?get_byte_from_kbuf@@YAEXZ ENDP				; get_byte_from_kbuf
_TEXT	ENDS
PUBLIC	?keyboard_read@@YAXPAU_tagTTY@@@Z		; keyboard_read
EXTRN	?in_process@@YAXPAU_tagTTY@@I@Z:PROC		; in_process
; Function compile flags: /Ogtpy
;	COMDAT ?keyboard_read@@YAXPAU_tagTTY@@@Z
_TEXT	SEGMENT
_p_tty$ = 8						; size = 4
?keyboard_read@@YAXPAU_tagTTY@@@Z PROC			; keyboard_read, COMDAT

; 238  : 	uint8_t		scan_code;
; 239  : 	//int8_t		output[2];
; 240  : 	int32_t		make;
; 241  : 
; 242  : 	uint32_t	key = 0;
; 243  : 	uint32_t*	keyrow;
; 244  : 
; 245  : 	if(kbd_in.count > 0){

	cmp	DWORD PTR ?kbd_in@@3U_tagS_KB@@A+8, 0
	jle	$LN1@keyboard_r
	push	ebx
	push	esi

; 246  : 
; 247  : 		code_with_E0 = 0;

	mov	DWORD PTR ?code_with_E0@@3HA, 0		; code_with_E0

; 248  : 
; 249  : 		scan_code = get_byte_from_kbuf();

	call	?get_byte_from_kbuf@@YAEXZ		; get_byte_from_kbuf
	mov	bl, al

; 250  : 
; 251  : 		//	decode the scan code
; 252  : 		if(scan_code == 0xe1){

	cmp	bl, 225					; 000000e1H
	jne	SHORT $LN29@keyboard_r

; 253  : 			int i ;
; 254  : 			int	is_pausebreak = 1;
; 255  : 			for(i = 1;i<6; i++){

	mov	esi, 1
	npad	6
$LL28@keyboard_r:

; 256  : 				if(get_byte_from_kbuf() != pause_scode[i]){

	call	?get_byte_from_kbuf@@YAEXZ		; get_byte_from_kbuf
	cmp	al, BYTE PTR _pause_scode[esi]
	jne	SHORT $LN42@keyboard_r
	add	esi, 1
	cmp	esi, 6
	jl	SHORT $LL28@keyboard_r
	pop	esi
	pop	ebx

; 350  : 			}
; 351  : 		}
; 352  : 	}
; 353  : }

	ret	0
$LN29@keyboard_r:

; 257  : 					is_pausebreak = 0;
; 258  : 					break;
; 259  : 				}
; 260  : 			}
; 261  : 			if(is_pausebreak){
; 262  : 				key = PAUSEBREAK;
; 263  : 			}
; 264  : 		}
; 265  : 		else if(scan_code == 0xe0){

	cmp	bl, 224					; 000000e0H
	jne	SHORT $LN42@keyboard_r

; 266  : 
; 267  : 			scan_code = get_byte_from_kbuf();

	call	?get_byte_from_kbuf@@YAEXZ		; get_byte_from_kbuf
	mov	bl, al

; 268  : 
; 269  : 			//	print_screen down
; 270  : 			if(scan_code == 0x2a){

	cmp	bl, 42					; 0000002aH
	jne	SHORT $LN19@keyboard_r

; 271  : 				if(get_byte_from_kbuf() == 0xe0){

	call	?get_byte_from_kbuf@@YAEXZ		; get_byte_from_kbuf
	cmp	al, 224					; 000000e0H
	jne	SHORT $LN39@keyboard_r

; 272  : 					if(get_byte_from_kbuf() == 0x37){

	call	?get_byte_from_kbuf@@YAEXZ		; get_byte_from_kbuf
	cmp	al, 55					; 00000037H

; 273  : 						key = PRINTSCREEN;
; 274  : 						make = 1;
; 275  : 					}
; 276  : 				}
; 277  : 			}
; 278  : 			//	print_screen up
; 279  : 			if(scan_code == 0xb7){

	jmp	SHORT $LN46@keyboard_r
$LN19@keyboard_r:
	cmp	bl, 183					; 000000b7H
	jne	SHORT $LN39@keyboard_r

; 280  : 				if(get_byte_from_kbuf() == 0xe0){

	call	?get_byte_from_kbuf@@YAEXZ		; get_byte_from_kbuf
	cmp	al, 224					; 000000e0H
	jne	SHORT $LN39@keyboard_r

; 281  : 					if(get_byte_from_kbuf() == 0xaa){

	call	?get_byte_from_kbuf@@YAEXZ		; get_byte_from_kbuf
	cmp	al, 170					; 000000aaH
$LN46@keyboard_r:

; 282  : 						key = PRINTSCREEN;
; 283  : 						make = 0;
; 284  : 					}
; 285  : 				}
; 286  : 			}
; 287  : 			if(key == 0){

	je	$LN43@keyboard_r
$LN39@keyboard_r:

; 288  : 				code_with_E0 = 1;

	mov	DWORD PTR ?code_with_E0@@3HA, 1		; code_with_E0
$LN42@keyboard_r:

; 289  : 			}
; 290  : 		}
; 291  : 		if((key != PAUSEBREAK) && (key != PRINTSCREEN)) {
; 292  : 			//	make code or break code
; 293  : 			make = (scan_code & FLAG_BREAK ? FALSE : TRUE);
; 294  : 			//	locate which vol
; 295  : 			keyrow = & keymap[(scan_code & 0x7f) * MAP_COLS];
; 296  : 
; 297  : 			column = 0;
; 298  : 			if(shift_l || shift_r){

	mov	edx, DWORD PTR ?shift_l@@3HA		; shift_l
	mov	esi, DWORD PTR ?shift_r@@3HA		; shift_r
	movzx	eax, bl
	mov	ecx, eax
	shr	ecx, 7
	and	eax, 127				; 0000007fH
	push	edi
	not	ecx
	lea	edi, DWORD PTR [eax+eax*2]
	xor	eax, eax
	and	ecx, 1
	test	edx, edx
	lea	edi, DWORD PTR ?keymap@@3PAIA[edi*4]
	mov	DWORD PTR ?column@@3HA, eax		; column
	jne	SHORT $LN12@keyboard_r
	test	esi, esi
	je	SHORT $LN13@keyboard_r
$LN12@keyboard_r:

; 299  : 				column = 1;

	mov	eax, 1
	mov	DWORD PTR ?column@@3HA, eax		; column
$LN13@keyboard_r:

; 300  : 			}
; 301  : 			if(code_with_E0){

	cmp	DWORD PTR ?code_with_E0@@3HA, 0		; code_with_E0
	je	SHORT $LN11@keyboard_r

; 302  : 				column = 2;

	mov	eax, 2
	mov	DWORD PTR ?column@@3HA, eax		; column

; 303  : 				code_with_E0 = 0;

	mov	DWORD PTR ?code_with_E0@@3HA, 0		; code_with_E0
$LN11@keyboard_r:

; 304  : 			}
; 305  : 
; 306  : 			key = keyrow[column];

	mov	edi, DWORD PTR [edi+eax*4]

; 307  : 
; 308  : 			switch(key){

	lea	eax, DWORD PTR [edi-264]
	cmp	eax, 5
	ja	SHORT $LN41@keyboard_r
	jmp	DWORD PTR $LN47@keyboard_r[eax*4]
$LN8@keyboard_r:

; 309  : 			case SHIFT_L:
; 310  : 				{
; 311  : 					shift_l = make;

	mov	edx, ecx
	mov	DWORD PTR ?shift_l@@3HA, edx		; shift_l
$LN41@keyboard_r:

; 334  : 			case ALT_R:
; 335  : 				{
; 336  : 					alt_r = make;

	mov	eax, DWORD PTR ?alt_r@@3HA		; alt_r
$LN2@keyboard_r:

; 337  : 				}
; 338  : 				break;
; 339  : 			default:
; 340  : 				break;
; 341  : 			}
; 342  : 			if( make ){

	test	ecx, ecx
	je	SHORT $LN45@keyboard_r

; 343  : 				key |= shift_l	?	FLAG_SHIFT_L	:	0;
; 344  : 				key |= shift_r	?	FLAG_SHIFT_R	:	0;
; 345  : 				key |= ctrl_l	?	FLAG_CTRL_L		:	0;
; 346  : 				key |= ctrl_r	?	FLAG_CTRL_R		:	0;
; 347  : 				key |= alt_l	?	FLAG_ALT_L		:	0;

	mov	ecx, DWORD PTR ?alt_l@@3HA		; alt_l

; 348  : 				key |= alt_r	?	FLAG_ALT_R		:	0;

	neg	eax
	sbb	eax, eax
	and	eax, 16384				; 00004000H
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 8192				; 00002000H
	or	eax, ecx
	mov	ecx, DWORD PTR ?ctrl_r@@3HA		; ctrl_r
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 4096				; 00001000H

; 349  : 				in_process(p_tty,key);

	or	eax, ecx
	mov	ecx, DWORD PTR ?ctrl_l@@3HA		; ctrl_l
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 2048				; 00000800H
	or	eax, ecx
	neg	esi
	sbb	esi, esi
	and	esi, 1024				; 00000400H
	or	eax, esi
	neg	edx
	sbb	edx, edx
	and	edx, 512				; 00000200H
	or	eax, edx
	or	eax, edi
	push	eax
	mov	eax, DWORD PTR _p_tty$[esp+12]
	push	eax
	call	?in_process@@YAXPAU_tagTTY@@I@Z		; in_process
	add	esp, 8
$LN45@keyboard_r:
	pop	edi
$LN43@keyboard_r:
	pop	esi
	pop	ebx
$LN1@keyboard_r:

; 350  : 			}
; 351  : 		}
; 352  : 	}
; 353  : }

	ret	0
$LN7@keyboard_r:

; 312  : 				}
; 313  : 				break;
; 314  : 			case SHIFT_R:
; 315  : 				{
; 316  : 					shift_r = make;

	mov	esi, ecx
	mov	DWORD PTR ?shift_r@@3HA, esi		; shift_r

; 317  : 				}
; 318  : 				break;

	jmp	SHORT $LN41@keyboard_r
$LN6@keyboard_r:

; 319  : 			case CTRL_L:
; 320  : 				{
; 321  : 					ctrl_l = make;

	mov	DWORD PTR ?ctrl_l@@3HA, ecx		; ctrl_l

; 322  : 				}
; 323  : 				break;

	jmp	$LN41@keyboard_r
$LN5@keyboard_r:

; 324  : 			case CTRL_R:
; 325  : 				{
; 326  : 					ctrl_r = make;

	mov	DWORD PTR ?ctrl_r@@3HA, ecx		; ctrl_r

; 327  : 				}
; 328  : 				break;

	jmp	$LN41@keyboard_r
$LN4@keyboard_r:

; 329  : 			case ALT_L:
; 330  : 				{
; 331  : 					alt_l = make;

	mov	DWORD PTR ?alt_l@@3HA, ecx		; alt_l

; 332  : 				}
; 333  : 				break;

	jmp	$LN41@keyboard_r
$LN3@keyboard_r:

; 334  : 			case ALT_R:
; 335  : 				{
; 336  : 					alt_r = make;

	mov	eax, ecx
	mov	DWORD PTR ?alt_r@@3HA, eax		; alt_r
	jmp	$LN2@keyboard_r
	npad	3
$LN47@keyboard_r:

; 350  : 			}
; 351  : 		}
; 352  : 	}
; 353  : }

	DD	$LN8@keyboard_r
	DD	$LN7@keyboard_r
	DD	$LN6@keyboard_r
	DD	$LN5@keyboard_r
	DD	$LN4@keyboard_r
	DD	$LN3@keyboard_r
?keyboard_read@@YAXPAU_tagTTY@@@Z ENDP			; keyboard_read
_TEXT	ENDS
PUBLIC	?keyboard_irq@@YAXXZ				; keyboard_irq
EXTRN	?out_byte@@YAXGE@Z:PROC				; out_byte
EXTRN	?in_byte@@YAEG@Z:PROC				; in_byte
EXTRN	?_save@@YAXXZ:PROC				; _save
; Function compile flags: /Ogtpy
;	COMDAT ?keyboard_irq@@YAXXZ
_TEXT	SEGMENT
?keyboard_irq@@YAXXZ PROC				; keyboard_irq, COMDAT

; 168  : 	save();

	sub	esp, 4
	pushad
	call	?_save@@YAXXZ				; _save

; 169  : 	//	get keyboard buffer
; 170  : 	_scan_code = in_byte(0x60);

	push	96					; 00000060H
	call	?in_byte@@YAEG@Z			; in_byte

; 171  : 	out_byte(INT_M_CTL,EOI);

	push	32					; 00000020H
	push	32					; 00000020H
	mov	BYTE PTR ?_scan_code@@3EA, al		; _scan_code
	call	?out_byte@@YAXGE@Z			; out_byte
	add	esp, 12					; 0000000cH

; 172  : 	
; 173  : 	//	for debug
; 174  : 	//(*((char*)0xb8000 + 11))++;
; 175  : 
; 176  : 	_asm sti

	sti

; 177  : 	keyboard_irq_handler(0);

	cmp	DWORD PTR ?kbd_in@@3U_tagS_KB@@A+8, 32	; 00000020H
	jge	SHORT $LN4@keyboard_i@2
	mov	eax, DWORD PTR ?kbd_in@@3U_tagS_KB@@A
	mov	cl, BYTE PTR ?_scan_code@@3EA		; _scan_code
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ?kbd_in@@3U_tagS_KB@@A
	add	eax, 1
	cmp	eax, OFFSET ?kbd_in@@3U_tagS_KB@@A+44
	mov	DWORD PTR ?kbd_in@@3U_tagS_KB@@A, eax
	jne	SHORT $LN3@keyboard_i@2
	mov	DWORD PTR ?kbd_in@@3U_tagS_KB@@A, OFFSET ?kbd_in@@3U_tagS_KB@@A+12
$LN3@keyboard_i@2:
	add	DWORD PTR ?kbd_in@@3U_tagS_KB@@A+8, 1
$LN4@keyboard_i@2:

; 178  : 	_asm cli

	cli

; 179  : 	_asm ret

	ret	0
?keyboard_irq@@YAXXZ ENDP				; keyboard_irq
_TEXT	ENDS
PUBLIC	??_C@_0CB@PBEMOEKF@Keyboard?5irq?5handler?5installed?4?6@ ; `string'
PUBLIC	?initial_keyboard@@YAXXZ			; initial_keyboard
EXTRN	?enable_irq@@YAXH@Z:PROC			; enable_irq
EXTRN	?init_idt_desc@@YAXIP6AXXZEEG@Z:PROC		; init_idt_desc
EXTRN	?DbgPrintf@@YAHPBDZZ:PROC			; DbgPrintf
;	COMDAT ??_C@_0CB@PBEMOEKF@Keyboard?5irq?5handler?5installed?4?6@
CONST	SEGMENT
??_C@_0CB@PBEMOEKF@Keyboard?5irq?5handler?5installed?4?6@ DB 'Keyboard ir'
	DB	'q handler installed.', 0aH, 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?initial_keyboard@@YAXXZ
_TEXT	SEGMENT
?initial_keyboard@@YAXXZ PROC				; initial_keyboard, COMDAT

; 184  : {

	push	esi

; 185  : 	DbgPrintf("Keyboard irq handler installed.\n");

	push	OFFSET ??_C@_0CB@PBEMOEKF@Keyboard?5irq?5handler?5installed?4?6@
	call	?DbgPrintf@@YAHPBDZZ			; DbgPrintf

; 186  : 	init_idt_desc(33,keyboard_irq,DA_386IGATE,PRIVILEGE_KRNL,0x8);

	push	8
	xor	esi, esi
	push	esi
	push	142					; 0000008eH
	push	OFFSET ?keyboard_irq@@YAXXZ		; keyboard_irq
	push	33					; 00000021H
	call	?init_idt_desc@@YAXIP6AXXZEEG@Z		; init_idt_desc

; 187  : 
; 188  : 	shift_l = 0;
; 189  : 	shift_r = 0;
; 190  : 	alt_l	= 0;
; 191  : 	alt_r	= 0;
; 192  : 	ctrl_l	= 0;
; 193  : 	ctrl_r	= 0;
; 194  : 
; 195  : 	caps_lock = 0;
; 196  : 	num_lock  = 1;
; 197  : 	scroll_lock = 0;
; 198  : 
; 199  : 	//	initialize keyboard buffer
; 200  : 	kbd_in.count = 0;
; 201  : 	kbd_in.p_head = kbd_in.p_tail = kbd_in.buf;

	mov	eax, OFFSET ?kbd_in@@3U_tagS_KB@@A+12

; 202  : 	enable_irq(KEYBOARD_IRQ);

	push	1
	mov	DWORD PTR ?shift_l@@3HA, esi		; shift_l
	mov	DWORD PTR ?shift_r@@3HA, esi		; shift_r
	mov	DWORD PTR ?alt_l@@3HA, esi		; alt_l
	mov	DWORD PTR ?alt_r@@3HA, esi		; alt_r
	mov	DWORD PTR ?ctrl_l@@3HA, esi		; ctrl_l
	mov	DWORD PTR ?ctrl_r@@3HA, esi		; ctrl_r
	mov	DWORD PTR ?caps_lock@@3HA, esi		; caps_lock
	mov	DWORD PTR ?num_lock@@3HA, 1		; num_lock
	mov	DWORD PTR ?scroll_lock@@3HA, esi	; scroll_lock
	mov	DWORD PTR ?kbd_in@@3U_tagS_KB@@A+8, esi
	mov	DWORD PTR ?kbd_in@@3U_tagS_KB@@A+4, eax
	mov	DWORD PTR ?kbd_in@@3U_tagS_KB@@A, eax
	call	?enable_irq@@YAXH@Z			; enable_irq
	add	esp, 28					; 0000001cH
	pop	esi

; 203  : }

	ret	0
?initial_keyboard@@YAXXZ ENDP				; initial_keyboard
_TEXT	ENDS
END
